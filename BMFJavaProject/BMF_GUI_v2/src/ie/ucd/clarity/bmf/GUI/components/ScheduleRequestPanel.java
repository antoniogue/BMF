/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ScheduleRequestPanel.java
 *
 * Created on 20-ago-2010, 12.35.05
 */
package ie.ucd.clarity.bmf.GUI.components;

import ie.ucd.clarity.bmf.GUI.CustomDestinationFrame;
import ie.ucd.clarity.bmf.GUI.InitialFrame;
import ie.ucd.clarity.bmf.GUI.RequestsFrame;
import ie.ucd.clarity.bmf.GUI.common.BMFGroupGUI;
import ie.ucd.clarity.bmf.GUI.common.BMFNodeGUI;
import ie.ucd.clarity.bmf.GUI.common.BMFObjectGUI;
import ie.ucd.clarity.bmf.GUI.common.BMFSensorGUI;
import ie.ucd.clarity.bmf.GUI.common.formulas.UtilList;
import ie.ucd.clarity.bmf.common.Constants;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import ie.ucd.clarity.bmf.GUI.notification.NewRequest;
import ie.ucd.clarity.bmf.common.InvalidPacketParametersException;
import ie.ucd.clarity.bmf.communication.IConfigurationPacket;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 * @author  Andrea
 */
public class ScheduleRequestPanel extends javax.swing.JPanel implements Observer {

    /**
	 * @uml.property  name="node"
	 * @uml.associationEnd  
	 */
    BMFObjectGUI node;
    /**
	 * @uml.property  name="frame"
	 * @uml.associationEnd  
	 */
    InitialFrame frame;
    /**
	 * @uml.property  name="dest"
	 * @uml.associationEnd  
	 */
    CustomDestinationFrame dest;
    /**
	 * @uml.property  name="_this"
	 * @uml.associationEnd  
	 */
    ScheduleRequestPanel _this = this;
    ArrayList<BMFSensorGUI> sensors;
    String sensorName[];
    int id = 1;

    /** Creates new form ScheduleRequestPanel */
    public ScheduleRequestPanel() {
    }

    public ScheduleRequestPanel(BMFObjectGUI node, InitialFrame frame) {
        this.node = node;
        this.frame = frame;
        setSensors();
        initComponents();
        setLabelSlider();
        durationLabel.addMouseListener(new Listener());
        periodLabel.addMouseListener(new Listener());
        this.frame.getConsumer().addObserver(this);
        init(false);
    }

    public ScheduleRequestPanel(BMFObjectGUI node) {
    }

    private void init(boolean value) {
        requestParameterPanel.setVisible(!value);
        aggregationParameterPanel.setVisible(value);
        wrongDestLabel.setVisible(value);
        wrongDurationLabel.setVisible(value);
        wrongPeriodLabel.setVisible(value);
        wrongThresholdValueLabel.setVisible(value);
        wrongActuatorParamsLabel.setVisible(value);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        scheduleButton = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        requestParameterPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        actionJComboBox = new javax.swing.JComboBox();
        sensor_actuatorTypeJComboBox = new javax.swing.JComboBox();
        actuatorParamJTextField = new javax.swing.JTextField();
        actuatorParamJComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        dataToRequestJComboBox = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        syntheticDataTypeJComboBox = new javax.swing.JComboBox();
        sensorToSendIfThresholdJComboBox = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        thresholdsToCheckJComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        threshold1TypeJComboBox = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        threshold1ValueJTextField = new javax.swing.JTextField();
        wrongThresholdValueLabel = new javax.swing.JLabel();
        wrongActuatorParamsLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nameRequestTextField = new javax.swing.JTextField();
        idRequestTextField = new javax.swing.JTextField();
        setDestinationButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        destinationTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        periodCombo = new javax.swing.JComboBox();
        periodLabel = new MyLabel(0);
        periodSlider = new javax.swing.JSlider();
        durationSlider = new javax.swing.JSlider();
        durationLabel = new MyLabel(1);
        durationCombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        aggregationRadioButton = new javax.swing.JRadioButton();
        requestRadioButton = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        oneShotRequestcheckBox = new javax.swing.JCheckBox();
        wrongDestLabel = new javax.swing.JLabel();
        wrongPeriodLabel = new javax.swing.JLabel();
        wrongDurationLabel = new javax.swing.JLabel();
        unlimitedCheckBox = new javax.swing.JCheckBox();
        aggregationParameterPanel = new javax.swing.JPanel();
        AggregationTypeComboBox = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sensor_actuatorTypeAggregationJComboBox = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        scheduleButton.setText("SCHEDULE REQUEST");
        scheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleButtonActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel18.setText("Request/Aggregation Form");

        requestParameterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Request Parameter"));

        jLabel5.setText("Action:");

        actionJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SENSING", "ACTUATING" }));
        actionJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionJComboBoxActionPerformed(evt);
            }
        });

        sensor_actuatorTypeJComboBox.setModel(new DefaultComboBoxModel(sensorName));

        actuatorParamJTextField.setText("0");
        actuatorParamJTextField.setEnabled(false);

        actuatorParamJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NO_PARAM", "LED_0_TOGGLE", "LED_1_TOGGLE", "LED_2_TOGGLE" }));
        actuatorParamJComboBox.setEnabled(false);

        jLabel6.setText("Actuator Param:");

        jLabel7.setText("Data to request:");

        dataToRequestJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SENSED DATA", "THRESHOLD NOTIFICATION" }));
        dataToRequestJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataToRequestJComboBoxActionPerformed(evt);
            }
        });

        jLabel13.setText("Synthethic data type:");

        syntheticDataTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RAW", "AVERAGE", "MIN", "MAX" }));

        sensorToSendIfThresholdJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SAME SENSOR", "ACC X", "ACC Y", "ACC Z", "HUMIDITY", "IR", "LIGHT", "MAGNETIC X", "MAGNETIC Y", "SOUND", "TEMPERATURE", "ELECTRICITY", "ENERGY" }));
        sensorToSendIfThresholdJComboBox.setEnabled(false);

        jLabel14.setText("Sensor to send if Thresholds exceeded:");

        thresholdsToCheckJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1" }));
        thresholdsToCheckJComboBox.setSelectedIndex(1);
        thresholdsToCheckJComboBox.setEnabled(false);

        jLabel8.setText("Thresholds to check:");

        jLabel9.setText("Threshold 1 type:");

        threshold1TypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LOWER", "BIGGER", "TRANSITION" }));
        threshold1TypeJComboBox.setSelectedIndex(2);
        threshold1TypeJComboBox.setEnabled(false);

        jLabel15.setText("value:");

        threshold1ValueJTextField.setText("100");
        threshold1ValueJTextField.setEnabled(false);

        wrongThresholdValueLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        wrongThresholdValueLabel.setForeground(new java.awt.Color(255, 0, 0));
        wrongThresholdValueLabel.setText("*");

        wrongActuatorParamsLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        wrongActuatorParamsLabel.setForeground(new java.awt.Color(255, 0, 0));
        wrongActuatorParamsLabel.setText("*");

        org.jdesktop.layout.GroupLayout requestParameterPanelLayout = new org.jdesktop.layout.GroupLayout(requestParameterPanel);
        requestParameterPanel.setLayout(requestParameterPanelLayout);
        requestParameterPanelLayout.setHorizontalGroup(
            requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(requestParameterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(requestParameterPanelLayout.createSequentialGroup()
                        .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5)
                            .add(jLabel7)
                            .add(jLabel6))
                        .add(37, 37, 37)
                        .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(requestParameterPanelLayout.createSequentialGroup()
                                .add(dataToRequestJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel13)
                                .add(18, 18, 18)
                                .add(syntheticDataTypeJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(requestParameterPanelLayout.createSequentialGroup()
                                .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(actuatorParamJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(actionJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(18, 18, 18)
                                .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(sensor_actuatorTypeJComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(actuatorParamJTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(wrongActuatorParamsLabel))))
                    .add(requestParameterPanelLayout.createSequentialGroup()
                        .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel8)
                            .add(jLabel9))
                        .add(18, 18, 18)
                        .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(requestParameterPanelLayout.createSequentialGroup()
                                .add(threshold1TypeJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel15)
                                .add(18, 18, 18)
                                .add(threshold1ValueJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(wrongThresholdValueLabel))
                            .add(requestParameterPanelLayout.createSequentialGroup()
                                .add(thresholdsToCheckJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel14)
                                .add(18, 18, 18)
                                .add(sensorToSendIfThresholdJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        requestParameterPanelLayout.setVerticalGroup(
            requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(requestParameterPanelLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(actionJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel5))
                    .add(sensor_actuatorTypeJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(actuatorParamJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(actuatorParamJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(wrongActuatorParamsLabel))
                .add(18, 18, 18)
                .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(dataToRequestJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel13)
                    .add(syntheticDataTypeJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(thresholdsToCheckJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel14)
                    .add(sensorToSendIfThresholdJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(requestParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(threshold1TypeJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15)
                    .add(threshold1ValueJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(wrongThresholdValueLabel)))
        );

        nameRequestTextField.setText("NEW REQUEST");

        idRequestTextField.setEditable(false);
        idRequestTextField.setText(id+"");

        setDestinationButton.setText("DESTINATION");
        setDestinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDestinationButtonActionPerformed(evt);
            }
        });

        jLabel12.setText("ID:");

        jLabel11.setText("Name:");

        destinationTextField.setEditable(false);
        destinationTextField.setText(node.getName());

        jLabel1.setText("Schedule Destination:");

        jLabel3.setText("Period:");

        periodCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SEC", "MIN", "HOUR", "DAY" }));

        periodLabel.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        periodLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        periodLabel.setText(periodSlider.getValue()+"");
        periodLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        periodSlider.setMajorTickSpacing(1);
        periodSlider.setMaximum(60);
        periodSlider.setMinimum(1);
        periodSlider.setPaintLabels(true);
        periodSlider.setPaintTicks(true);
        periodSlider.setSnapToTicks(true);
        periodSlider.setValue(30);
        periodSlider.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        periodSlider.setDoubleBuffered(true);
        periodSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                periodSliderStateChanged(evt);
            }
        });

        durationSlider.setMajorTickSpacing(1);
        durationSlider.setMaximum(60);
        durationSlider.setMinimum(1);
        durationSlider.setPaintLabels(true);
        durationSlider.setPaintTicks(true);
        durationSlider.setSnapToTicks(true);
        durationSlider.setValue(30);
        durationSlider.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        durationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                durationSliderStateChanged(evt);
            }
        });

        durationLabel.setFont(new java.awt.Font("Tahoma", 3, 14));
        durationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        durationLabel.setText(durationSlider.getValue()+"");
        durationLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        durationCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SEC", "MIN", "HOUR", "DAYS" }));

        jLabel4.setText("Duration:");

        buttonGroup1.add(aggregationRadioButton);
        aggregationRadioButton.setText("AGGREGATION");
        aggregationRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggregationRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(requestRadioButton);
        requestRadioButton.setSelected(true);
        requestRadioButton.setText("REQUEST");
        requestRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestRadioButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("Type:");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jLabel10)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 20, Short.MAX_VALUE)
                .add(requestRadioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(aggregationRadioButton)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(aggregationRadioButton)
                    .add(requestRadioButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        oneShotRequestcheckBox.setText("ONE SHOT");
        oneShotRequestcheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneShotRequestcheckBoxActionPerformed(evt);
            }
        });

        wrongDestLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        wrongDestLabel.setForeground(new java.awt.Color(255, 0, 0));
        wrongDestLabel.setText("*");

        wrongPeriodLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        wrongPeriodLabel.setForeground(new java.awt.Color(255, 0, 0));
        wrongPeriodLabel.setText("*");

        wrongDurationLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        wrongDurationLabel.setForeground(new java.awt.Color(255, 0, 0));
        wrongDurationLabel.setText("*");

        unlimitedCheckBox.setText("UNLIMITED");
        unlimitedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlimitedCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jLabel11)
                        .add(18, 18, 18)
                        .add(nameRequestTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(16, 16, 16)
                        .add(jLabel12)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(idRequestTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(destinationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 274, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(setDestinationButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(wrongDestLabel))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(wrongPeriodLabel))
                            .add(jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(wrongDurationLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(durationCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(periodCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(durationLabel, 0, 0, Short.MAX_VALUE)
                            .add(periodLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(periodSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(durationSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(oneShotRequestcheckBox)
                            .add(unlimitedCheckBox))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel12)
                            .add(idRequestTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel11)
                            .add(nameRequestTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(destinationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(setDestinationButton)
                        .add(wrongDestLabel)))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(periodLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .add(periodCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3)
                            .add(wrongPeriodLabel))
                        .add(6, 6, 6))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(periodSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(oneShotRequestcheckBox))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(unlimitedCheckBox))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(18, 18, 18)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(durationCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel4)
                                .add(wrongDurationLabel)))
                        .add(durationLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(durationSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        aggregationParameterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Aggregation Parameter"));

        AggregationTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MIN", "MAX", "AVERAGE", "VARIANCE" }));

        jLabel16.setText("Aggregation Type:");

        jLabel2.setText("Action:");

        sensor_actuatorTypeAggregationJComboBox.setModel(new DefaultComboBoxModel(sensorName));

        org.jdesktop.layout.GroupLayout aggregationParameterPanelLayout = new org.jdesktop.layout.GroupLayout(aggregationParameterPanel);
        aggregationParameterPanel.setLayout(aggregationParameterPanelLayout);
        aggregationParameterPanelLayout.setHorizontalGroup(
            aggregationParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(aggregationParameterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(aggregationParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel16)
                    .add(jLabel2))
                .add(28, 28, 28)
                .add(aggregationParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(sensor_actuatorTypeAggregationJComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(AggregationTypeComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(373, Short.MAX_VALUE))
        );
        aggregationParameterPanelLayout.setVerticalGroup(
            aggregationParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(aggregationParameterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(aggregationParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(sensor_actuatorTypeAggregationJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(aggregationParameterPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(AggregationTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, aggregationParameterPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabel18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, requestParameterPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, scheduleButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 173, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(requestParameterPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(aggregationParameterPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scheduleButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void scheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleButtonActionPerformed
        // TODO add your handling code here:
        IConfigurationPacket newReq;
        newReq = frame.getConsumer().getPacketBuilder().getIConfigurationPacket();
        //id = newReq.getRequestID();
        try {

            if (dest == null && (node instanceof BMFNodeGUI)) {
                newReq.setDestinationNode(((BMFNodeGUI) node).getID());
            } else if (dest == null && (node instanceof BMFGroupGUI)) {
                newReq.setDestinationGroups(((BMFGroupGUI) node).getID() + "");
            } else if (dest != null && dest.getDestinationNodes() != null) {
                newReq.setDestinationGroups(dest.getExpression());
            }

            newReq.setConfigurationType(Constants.PKT_TYPE_CONFIGURATION_SCHEDULE);
            newReq.setPeriodTimescale(periodCombo.getSelectedIndex());
            newReq.setLifetimeTimescale(durationCombo.getSelectedIndex());
            if (oneShotRequestcheckBox.isSelected()) {
                newReq.setPeriodValue(0);
                newReq.setLifetimeValue(0);
                newReq.setPeriodTimescale(0);
                newReq.setLifetimeTimescale(0);
            } else {
                newReq.setPeriodValue(periodSlider.getValue());
                if (!unlimitedCheckBox.isSelected()) {
                    newReq.setLifetimeValue(durationSlider.getValue());
                } else {
                    newReq.setLifetimeValue(0);
                }
            }
            if (requestRadioButton.isSelected()) {
                buildRequest(newReq);
            } else {
                buildAggregation(newReq);
            }
        } catch (InvalidPacketParametersException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }


    }//GEN-LAST:event_scheduleButtonActionPerformed

    private void setDestinationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDestinationButtonActionPerformed
        new Thread() {

            public void run() {
                dest = new CustomDestinationFrame(
                        frame.getNodesPanel().getTree().getNodes(), frame.getGroupsPanel().getTree().getGroups(), _this);
                dest.setVisible(true);
            }
        }.start();
    }//GEN-LAST:event_setDestinationButtonActionPerformed

    private void actionJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionJComboBoxActionPerformed
        if (actionJComboBox.getSelectedIndex() == Constants.ACTION_SENSING) {
            sensor_actuatorTypeJComboBox.setModel(new DefaultComboBoxModel(sensorName));

            actuatorParamJComboBox.setEnabled(false);
            actuatorParamJTextField.setEnabled(false);
            dataToRequestJComboBox.setEnabled(true);

            syntheticDataTypeJComboBox.setEnabled(true);
            thresholdsToCheckJComboBox.setEnabled(dataToRequestJComboBox.getSelectedIndex() == 1);
            sensorToSendIfThresholdJComboBox.setEnabled(dataToRequestJComboBox.getSelectedIndex() == 1);
            threshold1TypeJComboBox.setEnabled(dataToRequestJComboBox.getSelectedIndex() == 1);
            threshold1ValueJTextField.setEnabled(dataToRequestJComboBox.getSelectedIndex() == 1);
        } else if (actionJComboBox.getSelectedIndex() == Constants.ACTION_ACTUATING) {
            sensor_actuatorTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"LOW POWER DUTY CYCLE", "LED", "DYNAMIC LENGHT PACKET"}));
            //sensor_actuatorTypeJLabel.setText("Actuator Type");
            actuatorParamJComboBox.setEnabled(true);
            actuatorParamJTextField.setEnabled(true);
            dataToRequestJComboBox.setEnabled(false);

            syntheticDataTypeJComboBox.setEnabled(false);
            thresholdsToCheckJComboBox.setEnabled(false);
            sensorToSendIfThresholdJComboBox.setEnabled(false);
            threshold1TypeJComboBox.setEnabled(false);
            threshold1ValueJTextField.setEnabled(false);

        }
    }//GEN-LAST:event_actionJComboBoxActionPerformed



    private void dataToRequestJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataToRequestJComboBoxActionPerformed
        if (dataToRequestJComboBox.getSelectedIndex() == 0) {
            // data from sensor request
            thresholdsToCheckJComboBox.setEnabled(false);
            sensorToSendIfThresholdJComboBox.setEnabled(false);
            threshold1TypeJComboBox.setEnabled(false);
            threshold1ValueJTextField.setEnabled(false);
        } else if (dataToRequestJComboBox.getSelectedIndex() == 1) {
            // threshold data request
            thresholdsToCheckJComboBox.setEnabled(true);
            sensorToSendIfThresholdJComboBox.setEnabled(true);
            threshold1TypeJComboBox.setEnabled(true);
            threshold1ValueJTextField.setEnabled(true);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_dataToRequestJComboBoxActionPerformed

    private void durationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_durationSliderStateChanged
        durationLabel.setText(durationSlider.getValue() + "");
    }//GEN-LAST:event_durationSliderStateChanged

    private void periodSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_periodSliderStateChanged
        periodLabel.setText(periodSlider.getValue() + "");
    }//GEN-LAST:event_periodSliderStateChanged

    private void requestRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestRadioButtonActionPerformed
        if (requestRadioButton.isSelected()) {// TYPE REQUEST
            requestParameterPanel.setVisible(true);
            aggregationParameterPanel.setVisible(false);
            oneShotRequestcheckBox.setVisible(true);
            scheduleButton.setText("SCHEDULE REQUEST");
            nameRequestTextField.setText("NEW REQUEST");
            this.repaint();
        }
    }//GEN-LAST:event_requestRadioButtonActionPerformed

    private void aggregationRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggregationRadioButtonActionPerformed
        if (aggregationRadioButton.isSelected()) {// TYPE AGGREGATION
            requestParameterPanel.setVisible(false);
            aggregationParameterPanel.setVisible(true);
            oneShotRequestcheckBox.setSelected(false);
            oneShotRequestcheckBox.setVisible(false);
            scheduleButton.setText("SCHEDULE AGGREGATION");
            nameRequestTextField.setText("NEW AGGREGATION");
            enableOneShot(true);
            this.repaint();
        }
    }//GEN-LAST:event_aggregationRadioButtonActionPerformed

    private void oneShotRequestcheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneShotRequestcheckBoxActionPerformed

        enableOneShot(!oneShotRequestcheckBox.isSelected());
    }//GEN-LAST:event_oneShotRequestcheckBoxActionPerformed

    private void unlimitedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlimitedCheckBoxActionPerformed
        durationSlider.setEnabled(!unlimitedCheckBox.isSelected());
        if (unlimitedCheckBox.isSelected()) {
            durationLabel.setText("UNL");
            durationCombo.setEnabled(false);
        } else {
            durationLabel.setText(durationSlider.getValue() + "");
            durationCombo.setEnabled(true);
        }
    }//GEN-LAST:event_unlimitedCheckBoxActionPerformed

    private void enableOneShot(boolean value) {
        boolean a = false;
        if (value) {
            if (unlimitedCheckBox.isSelected()) {
                durationLabel.setText("UNL");
                durationSlider.setEnabled(!unlimitedCheckBox.isSelected());
                a = true;
            } else {
                durationSlider.setValue(30);
                durationLabel.setText(durationSlider.getValue() + "");
            }
            periodSlider.setValue(30);
        } else {
            durationSlider.setValue(1);
            periodSlider.setValue(1);
        }
        if (!a) {
            durationSlider.setEnabled(value);
        }
        periodCombo.setEnabled(value);
        periodLabel.setEnabled(value);
        periodSlider.setEnabled(value);
        durationCombo.setEnabled(value);
        durationLabel.setEnabled(value);
        unlimitedCheckBox.setEnabled(value);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AggregationTypeComboBox;
    private javax.swing.JComboBox actionJComboBox;
    private javax.swing.JComboBox actuatorParamJComboBox;
    private javax.swing.JTextField actuatorParamJTextField;
    private javax.swing.JPanel aggregationParameterPanel;
    private javax.swing.JRadioButton aggregationRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox dataToRequestJComboBox;
    private javax.swing.JTextField destinationTextField;
    private javax.swing.JComboBox durationCombo;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JSlider durationSlider;
    private javax.swing.JTextField idRequestTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField nameRequestTextField;
    private javax.swing.JCheckBox oneShotRequestcheckBox;
    private javax.swing.JComboBox periodCombo;
    private javax.swing.JLabel periodLabel;
    private javax.swing.JSlider periodSlider;
    private javax.swing.JPanel requestParameterPanel;
    private javax.swing.JRadioButton requestRadioButton;
    private javax.swing.JButton scheduleButton;
    private javax.swing.JComboBox sensorToSendIfThresholdJComboBox;
    private javax.swing.JComboBox sensor_actuatorTypeAggregationJComboBox;
    private javax.swing.JComboBox sensor_actuatorTypeJComboBox;
    private javax.swing.JButton setDestinationButton;
    private javax.swing.JComboBox syntheticDataTypeJComboBox;
    private javax.swing.JComboBox threshold1TypeJComboBox;
    private javax.swing.JTextField threshold1ValueJTextField;
    private javax.swing.JComboBox thresholdsToCheckJComboBox;
    private javax.swing.JCheckBox unlimitedCheckBox;
    private javax.swing.JLabel wrongActuatorParamsLabel;
    private javax.swing.JLabel wrongDestLabel;
    private javax.swing.JLabel wrongDurationLabel;
    private javax.swing.JLabel wrongPeriodLabel;
    private javax.swing.JLabel wrongThresholdValueLabel;
    // End of variables declaration//GEN-END:variables

    private void buildRequest(IConfigurationPacket newReq) {
        // building request

        newReq.setAction(actionJComboBox.getSelectedIndex()); // SENSIG OR ACTUATING
        newReq.setSensor_actuatorType(getSensor_actuatorType(
                sensorName[sensor_actuatorTypeJComboBox.getSelectedIndex()])); // SENSOR
        //newReq.setActuatorParams(actuatorParamJComboBox.getSelectedIndex());
        if (actuatorParamJTextField.isEnabled()) {
            newReq.setActuatorParams(checkInteger(actuatorParamJTextField.getText())); // PARAM VALUE
        }
        newReq.setDataType(dataToRequestJComboBox.getSelectedIndex()); // SENSED DATA OR THRESHOLD
        newReq.setSyntheticData(syntheticDataTypeJComboBox.getSelectedIndex()); // SYNTHETIC DATA TYPE
        int thresholdNumber = -1;
        if (thresholdsToCheckJComboBox.isEnabled()) {
            thresholdNumber = thresholdsToCheckJComboBox.getSelectedIndex();
            newReq.setThresholdNumber(thresholdNumber); // THRESHOLD TO CHECK
        }
        if (sensorToSendIfThresholdJComboBox.isEnabled()) {
            newReq.setSensorIfThreshold(
                    sensorToSendIfThresholdJComboBox.getSelectedIndex()); //Sensor to send if Thresholds exceeded:
        }
        if (thresholdNumber > 0) {
            int thresholdType[] = new int[thresholdNumber];
            int thresholdValue[] = new int[thresholdNumber];
            int sensorTypeMoreThreshold[] = new int[thresholdNumber - 1];

            thresholdType[0] = threshold1TypeJComboBox.getSelectedIndex();
            thresholdValue[0] = checkInteger(threshold1ValueJTextField.getText());

            newReq.setThresholdType(thresholdType);
            newReq.setThresholdValue(thresholdValue);
            newReq.setSensorTypeMoreThreshold(sensorTypeMoreThreshold);
        }
        String check = checkParameterRequest(newReq);
        if (check == null) {
            if (dest == null && (node instanceof BMFNodeGUI)) {
                ArrayList<BMFNodeGUI> n = new ArrayList<BMFNodeGUI>();
                n.add((BMFNodeGUI) node);
                frame.getConsumer().sendICofigurationPacket(newReq, nameRequestTextField.getText(), n, false);
                System.out.println("***1");
            } else if (dest == null && (node instanceof BMFGroupGUI)) {
                BMFGroupGUI g = ((BMFGroupGUI) node);
                frame.getConsumer().sendICofigurationPacket(newReq, nameRequestTextField.getText(), g.getNodes(), false);
                System.out.println("***2");
            } else if (dest != null && dest.getDestinationNodes() != null) {
                frame.getConsumer().sendICofigurationPacket(newReq, nameRequestTextField.getText(), dest.getDestinationNodes(), false);
                System.out.println("***3");
            }
            RequestsFrame rf = (RequestsFrame) (((this.getParent()).getParent()).getParent()).getParent();
            rf.dispose();
        } else {
            JOptionPane.showMessageDialog(this, check, "Wrong Request Parameter", JOptionPane.ERROR_MESSAGE);
        }

    }

    public void setDestinationText(String s) {
        this.destinationTextField.setText(s);
    }

    private void setSensors() {
        sensors = new ArrayList<BMFSensorGUI>();
        if (node instanceof BMFNodeGUI) {
            BMFNodeGUI nodegui = (BMFNodeGUI) node;
            for (int i = 0; i < nodegui.getSensors().size(); i++) {
                sensors.add(nodegui.getSensors().get(i));
            }
        } else if (node instanceof BMFGroupGUI) {
            BMFGroupGUI groupgui = (BMFGroupGUI) node;
            ArrayList<BMFNodeGUI> nodes = groupgui.getNodes();
            if (nodes.size() != 0) {
                ArrayList<BMFSensorGUI> inter = nodes.get(0).getSensors();
                for (int i = 1; i < nodes.size() - 1; i++) {
                    inter = UtilList.intersectSensors(inter, nodes.get(i).getSensors());
                }
                for (int i = 0; i < inter.size(); i++) {
                    sensors.add(inter.get(i));
                }
            } else {
                sensors = new ArrayList<BMFSensorGUI>();
            }
        }
        sensorName = new String[sensors.size()];
        for (int i = 0; i < sensors.size(); i++) {
            sensorName[i] = sensors.get(i).getName();
        }
        
    }

    public void setSensorsDestination(ArrayList<BMFNodeGUI> toret) {

        if (toret.size() != 0) {
            ArrayList<BMFSensorGUI> inter = toret.get(0).getSensors();
            for (int i = 1; i < toret.size() - 1; i++) {
                inter = UtilList.intersectSensors(inter, toret.get(i).getSensors());
            }
            sensors = new ArrayList<BMFSensorGUI>();
            for (int i = 0; i < inter.size(); i++) {
                sensors.add(inter.get(i));
            }
        } else {
            sensors = new ArrayList<BMFSensorGUI>();
        }
        sensorName = new String[sensors.size()];
        for (int i = 0; i < sensors.size(); i++) {
            sensorName[i] = sensors.get(i).getName();
        }
        sensor_actuatorTypeJComboBox.setModel(new DefaultComboBoxModel(sensorName));
        
    }

    private String checkParameterRequest(IConfigurationPacket newReq) {
        int periodtimescale = newReq.getPeriodTimescale();
        int periodvalue = newReq.getPeriodValue();
        int lifetimetimescale = newReq.getLifetimeTimescale();
        int lifetimevalue = newReq.getLifetimeValue();
        if (lifetimevalue == 0 && unlimitedCheckBox.isSelected()) {
            return null;
        }
        if (actuatorParamJTextField.isEnabled() && newReq.getActuatorParams() == -1) {
            wrongPeriodLabel.setVisible(false);
            wrongDurationLabel.setVisible(false);
            wrongThresholdValueLabel.setVisible(false);
            wrongActuatorParamsLabel.setVisible(true);
            return "Actuator Params Value must be an Integer (Check Actuator Params Value)";
        } else if ((newReq.getThresholdValue() != null) && (newReq.getThresholdValue()[0] == -1 && threshold1ValueJTextField.isEnabled())) { // IF THRESHOLD IS NOT AN INTEGER
            wrongPeriodLabel.setVisible(false);
            wrongDurationLabel.setVisible(false);
            wrongThresholdValueLabel.setVisible(true);
            wrongActuatorParamsLabel.setVisible(false);
            return "Threshold Value must be an Integer (Check Threshold Value)";
        } else if (lifetimetimescale == periodtimescale) {
            if (periodvalue <= lifetimevalue) {
                return null;
            } else {
                wrongPeriodLabel.setVisible(true);
                wrongDurationLabel.setVisible(false);
                wrongActuatorParamsLabel.setVisible(false);
                wrongThresholdValueLabel.setVisible(false);
                return "Period can't be bigger than Duration (Check Value)";
            }
        } else if (lifetimetimescale < periodtimescale) {
            wrongDurationLabel.setVisible(true);
            wrongPeriodLabel.setVisible(false);
            wrongActuatorParamsLabel.setVisible(false);
            wrongThresholdValueLabel.setVisible(false);
            return "Period can't be bigger than Duration (Check Time Scale)";
        } else {
            return null;
        }
    }

    private int checkInteger(String s) {
        try {
            return Integer.valueOf(s).intValue();
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private String checkParameterAggregation(IConfigurationPacket newReq) {
        if (dest == null && (node instanceof BMFNodeGUI)) {
            wrongDestLabel.setVisible(true);
            wrongDurationLabel.setVisible(false);
            wrongPeriodLabel.setVisible(false);
            return "Destination must to be a Group or Aggregation Groups)";
        } else {
            wrongDestLabel.setVisible(false);
            return checkParameterRequest(newReq);
        }
    }

    private void setLabelSlider() {
        //Create the label table.
        Hashtable<Integer, JLabel> labelTable =
                new Hashtable<Integer, JLabel>();
        //PENDING: could use images, but we don't have any good ones.
        labelTable.put(new Integer(1),
                new JLabel("Min"));
        //new JLabel(createImageIcon("images/stop.gif")) );
        labelTable.put(new Integer(10),
                new JLabel("10"));
        labelTable.put(new Integer(20),
                new JLabel("20"));
        labelTable.put(new Integer(30),
                new JLabel("30"));
        labelTable.put(new Integer(40),
                new JLabel("40"));
        labelTable.put(new Integer(50),
                new JLabel("50"));
        //new JLabel(createImageIcon("images/slow.gif")) );
        labelTable.put(new Integer(60),
                new JLabel("Max"));
        //new JLabel(createImageIcon("images/fast.gif")) );
        durationSlider.setLabelTable(labelTable);
        periodSlider.setLabelTable(labelTable);
    }

    public void update(Observable o, Object arg) {
        if (arg instanceof NewRequest) {
            if (arg instanceof NewRequest) {
                NewRequest newr = (NewRequest) arg;
                id = newr.getRequest().getRequest().getRequestID()+1;
                idRequestTextField.setText(id+"");
            }
        }
    }

    private void buildAggregation(IConfigurationPacket newReq) {
        newReq.setAction(0); // SENSIG
        newReq.setSensor_actuatorType(getSensor_actuatorType(
                sensorName[sensor_actuatorTypeAggregationJComboBox.getSelectedIndex()])); // SENSOR
        /*if (actuatorParamJTextField.isEnabled()) {
        newReq.setActuatorParams(Integer.parseInt(actuatorParamJTextField.getText())); // PARAM VALUE
        }*/
        newReq.setDataType(0); // SENSED DATA
        newReq.setSyntheticData(AggregationTypeComboBox.getSelectedIndex()); // SYNTHETIC DATA TYPE
        String check = checkParameterAggregation(newReq);
        if (check == null) {
            // NOTHING WRONG
            if (dest == null && (node instanceof BMFGroupGUI)) {
                BMFGroupGUI g = ((BMFGroupGUI) node);
                frame.getConsumer().sendICofigurationPacket(newReq, nameRequestTextField.getText(), g.getNodes(), true);
            } else if (dest != null && dest.getDestinationNodes() != null) {
                frame.getConsumer().sendICofigurationPacket(newReq, nameRequestTextField.getText(), dest.getDestinationNodes(), true);
            }
            RequestsFrame rf = (RequestsFrame) (((this.getParent()).getParent()).getParent()).getParent();
            rf.dispose();
            // END
        } else {
            JOptionPane.showMessageDialog(this, check, "Wrong Aggregation Parameter", JOptionPane.ERROR_MESSAGE);
        }
    }

    private int getSensor_actuatorType(String sensorName) {
        for (int i = 0; i < sensors.size(); i++) {
            if (sensors.get(i).getName().equals(sensorName)) {
                return sensors.get(i).getSensorCode();
            }
        }
        return -1;
    }

    class Listener extends MouseAdapter {

        public void mouseClicked(MouseEvent e) {
            MyLabel selected = ((MyLabel) e.getSource());
            if(!selected.isEnabled() || selected.getText().equals("UNL")) return;
            String s = JOptionPane.showInputDialog(selected, "Write an Integer", "Input Value", JOptionPane.PLAIN_MESSAGE);
            int i = checkInteger(s);
            if (i == -1) {
                JOptionPane.showMessageDialog(selected, "Value Must to be an Integer", "Check Value", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (i == 0) {
                JOptionPane.showMessageDialog(selected, "Period/Duration can not be 0", "Zero Value", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (i >= 1 && i <= 60) {
                // ho inserito un valore ammissibile
                // setto il valore nel label
                // e nella slider
                selected.setText("" + i);
                if (selected.getType() == 0) {
                    periodSlider.setValue(i);
                } else {
                    durationSlider.setValue(i);
                }
                return;
            }
        }
    }

    /**
	 * @return
	 * @uml.property  name="node"
	 */
    public BMFObjectGUI getNode() {
        return node;
    }

    /**
	 * @param node
	 * @uml.property  name="node"
	 */
    public void setNode(BMFObjectGUI node) {
        this.node = node;
        destinationTextField.setText(this.node.getName());
        setSensors();
        sensor_actuatorTypeAggregationJComboBox.setModel(new DefaultComboBoxModel(sensorName));
        sensor_actuatorTypeJComboBox.setModel(new DefaultComboBoxModel(sensorName));
    }

    

    /**
	 * @author  Matthew
	 */
    class MyLabel extends JLabel {

        /**
		 * @uml.property  name="type"
		 */
        private int type; // 1 duration 0 period

        public MyLabel(int type) {
            super();
            this.type = type;
            this.setToolTipText("Clic to Set Value");
            this.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
            this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        }

        /**
		 * @return
		 * @uml.property  name="type"
		 */
        public int getType() {
            return type;
        }
    }


}
