/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUIFrame.java
 *
 * Created on 19-feb-2010, 15.39.04
 */

package simpleConfigurationPanel;

import ie.ucd.clarity.bmf.network.manager.*;
import ie.ucd.clarity.bmf.network.manager.configurationPackets.*;
import ie.ucd.clarity.bmf.network.manager.nodesAndGroups.BMFNodesAndGroupsManager;
import ie.ucd.clarity.bmf.common.*;
import ie.ucd.clarity.bmf.communication.ConfigurationPacket;
//import bmf.common.LowLevelBMFListener;
import ie.ucd.clarity.bmf.communication.Destination;
import ie.ucd.clarity.bmf.communication.IConfigurationPacket;
import ie.ucd.clarity.bmf.communication.MembershipPacket;
import ie.ucd.clarity.bmf.communication.MessageBuilder;
import ie.ucd.clarity.bmf.communication.MessageParser;
import ie.ucd.clarity.bmf.communication.PacketBuilder;
import ie.ucd.clarity.bmf.communication.ResetPacket;
import ie.ucd.clarity.bmf.configurationfile.ConfigurationFileReader;
import ie.ucd.clarity.bmf.data.file.FileDataSaverBuilder;
import ie.ucd.clarity.bmf.network.platform.IPlatform;
import ie.ucd.clarity.bmf.network.platform.tinyOS.TinyOSBMFManager;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;

/**
 *
 * @author Antonio
 */
public class GUIFrame extends javax.swing.JFrame implements INetworkBMFListener,
                                                            IBMFRequestDurationListener{

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;




	/** Creates new form GUIFrame */
    public GUIFrame(/*String port, String speed,*/ String map) {

        //NIMBUS L&F
        try{
           for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }catch(Exception e){e.printStackTrace();}

        //manager = LowLevelBMFManager.getInstance("COM9", "115200");

        mapFileName = map;
       
        if(!new ConfigurationFileReader().readConfigurationFile()){
        	System.out.println("Configuration File not found");
        	return;
        }
        	
        
        TinyOSBMFManager tinyos = new TinyOSBMFManager();
        manager = new NetworkManager();
        manager.addIPlatform(tinyos);
        
        //BMFNodesAndGroupsManager bmf = new BMFNodesAndGroupsManager();
		//PacketBuilder pb = new PacketBuilder();
		
		ConfigurationPacketsManager cpm = new ConfigurationPacketsManager();
		
		manager.setIMessageParser(new MessageParser());
		manager.setIMessageBuilder(new MessageBuilder());
        
		//c.setIPacketBuilder(pb);
		//c.setIBMFNodesAndGroupsManager(bmf);
		//bmf.setINetworkManager(nm);
		//bmf.setIPacketBuilder(pb);
        
        //manager = LowLevelBMFManager.getInstance(port, speed);
        
        manager.registerListener(this);



        
        
//        myPreviousInit();

        initComponents();

        myInit();
        print("APPLICATION STARTED\n");

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        nodesJList = new javax.swing.JList();
        nodesJLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        groupsJList = new javax.swing.JList();
        groupsJLabel = new javax.swing.JLabel();
        addGroupJButton = new javax.swing.JButton();
        groupPropertiesJButton = new javax.swing.JButton();
        delGroupJButton = new javax.swing.JButton();
        nodePropertiesJButton = new javax.swing.JButton();
        functionsJTabbedPane1 = new javax.swing.JTabbedPane();
        nodeMemebershipJPanel4 = new javax.swing.JPanel();
        updateMembershipJButton = new javax.swing.JButton();
        membershipTypeJLabel = new javax.swing.JLabel();
        membershipTypeJComboBox = new javax.swing.JComboBox();
        membershipSelectionJLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        membershipSelectionJList = new javax.swing.JList();
        membershipDestinationJLabel = new javax.swing.JLabel();
        membershipDestinationJTextField = new javax.swing.JTextField();
        scheduleJPanel2 = new javax.swing.JPanel();
        scheduleFunctionJButton = new javax.swing.JButton();
        scheduleRequestJLabel7 = new javax.swing.JLabel();
        scheduleRequestNameJTextField1 = new javax.swing.JTextField();
        periodTimescaleJLabel = new javax.swing.JLabel();
        periodTimescaleJComboBox = new javax.swing.JComboBox();
        durationTimescaleJLabel = new javax.swing.JLabel();
        durationTimescaleJComboBox2 = new javax.swing.JComboBox();
        actionJLabel = new javax.swing.JLabel();
        actionJComboBox = new javax.swing.JComboBox();
        sensor_actuatorTypeJComboBox = new javax.swing.JComboBox();
        actuatorParamJLabel = new javax.swing.JLabel();
        actuatorParamJComboBox = new javax.swing.JComboBox();
        dataToRequestJLabel = new javax.swing.JLabel();
        dataToRequestJComboBox = new javax.swing.JComboBox();
        syntheticDataTypeJLabel = new javax.swing.JLabel();
        syntheticDataTypeJComboBox = new javax.swing.JComboBox();
        thresholdsToCheckJLabel = new javax.swing.JLabel();
        thresholdsToCheckJComboBox = new javax.swing.JComboBox();
        sensorToSendIfThresholdJLabel = new javax.swing.JLabel();
        sensorToSendIfThresholdJComboBox = new javax.swing.JComboBox();
        threshold1TypeJLabel = new javax.swing.JLabel();
        threshold1TypeJComboBox = new javax.swing.JComboBox();
        threshold1ValueJLabel = new javax.swing.JLabel();
        threshold1ValueJTextField = new javax.swing.JTextField();
        sensor4Threshold2JLabel = new javax.swing.JLabel();
        sensor4Threshold2JComboBox = new javax.swing.JComboBox();
        threshold2TypeJLabel = new javax.swing.JLabel();
        threshold2TypeJComboBox = new javax.swing.JComboBox();
        threshold2ValueJLabel = new javax.swing.JLabel();
        threshold2ValueJTextField = new javax.swing.JTextField();
        scheduleRequestNameJLabel = new javax.swing.JLabel();
        scheduleRequestIDJLabel = new javax.swing.JLabel();
        scheduleRequestIDJTextField = new javax.swing.JTextField();
        periodValueJComboBox = new javax.swing.JComboBox();
        durationValueJComboBox2 = new javax.swing.JComboBox();
        requestsAvailableJComboBox = new javax.swing.JComboBox();
        scheduleDestinationJLabel = new javax.swing.JLabel();
        scheduleDestinationJTextField = new javax.swing.JTextField();
        actuatorParamJTextField = new javax.swing.JTextField();
        unscheduleJPanel3 = new javax.swing.JPanel();
        unscheduleFunctionJButton = new javax.swing.JButton();
        unscheduleRequestJLabel = new javax.swing.JLabel();
        unscheduleRequestNameJLabel = new javax.swing.JLabel();
        unscheduleRequestNameJComboBox = new javax.swing.JComboBox();
        unscheduleRequestIDJTextField = new javax.swing.JTextField();
        unscheduleRequestIDJLabel = new javax.swing.JLabel();
        unscheduleDestinationJLabel = new javax.swing.JLabel();
        unscheduleDestinationJTextField = new javax.swing.JTextField();
        resetJPanel5 = new javax.swing.JPanel();
        resetDestinationNodesJButton = new javax.swing.JButton();
        resetDestinationJLabel1 = new javax.swing.JLabel();
        resetDestinationJTextField = new javax.swing.JTextField();
        functionsJLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        consoleJTextArea = new javax.swing.JTextArea();
        consoleJLabel = new javax.swing.JLabel();
        saveConsoleJCheckBox = new javax.swing.JCheckBox();
        nodeGroupHelpJButton = new javax.swing.JButton();
        nodePropertiesJButton1 = new javax.swing.JButton();
        addGroupJButton1 = new javax.swing.JButton();
        activeFunctionsJLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        functionsJList = new javax.swing.JList();
        mapContainerJPanel = new javax.swing.JPanel();
        mapJPanel = new javax.swing.JPanel();
        groupsJLabel1 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        functionDetailsJTextArea = new javax.swing.JTextArea();
        functionDetailsJLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Configuration BMF panel");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(getIcon());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        nodesJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Node 1", "Node 2", "Node 3", "Node 4", "Node 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        nodesJList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(nodesJList);

        nodesJLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        nodesJLabel.setText("NODES");

        groupsJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Ambiental Light", "Light State", "Presence Detector" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        groupsJList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane2.setViewportView(groupsJList);

        groupsJLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        groupsJLabel.setText("GROUPS");

        addGroupJButton.setText("Add Group");
        addGroupJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGroupJButtonActionPerformed(evt);
            }
        });

        groupPropertiesJButton.setText("Manage Group");
        groupPropertiesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupPropertiesJButtonActionPerformed(evt);
            }
        });

        delGroupJButton.setText("Del Group");
        delGroupJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delGroupJButtonActionPerformed(evt);
            }
        });

        nodePropertiesJButton.setText("<html>Node<br />Properties</html>");
        nodePropertiesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePropertiesJButtonActionPerformed(evt);
            }
        });

        functionsJTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        functionsJTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        updateMembershipJButton.setText("Update Membership");
        updateMembershipJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMembershipJButtonActionPerformed(evt);
            }
        });

        membershipTypeJLabel.setText("Membership Type");

        membershipTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UPDATE", "ADD", "DELETE", "RESET" }));
        membershipTypeJComboBox.setSelectedIndex(1);
        membershipTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                membershipTypeJComboBoxActionPerformed(evt);
            }
        });

        membershipSelectionJLabel.setText("Select maximum 8 Groups to join to");

        membershipSelectionJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Ambiental Light", "Light State", "Presence Detector" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane6.setViewportView(membershipSelectionJList);

        membershipDestinationJLabel.setText("Membership Destination");

        membershipDestinationJTextField.setEditable(false);
        membershipDestinationJTextField.setText("NO DESTINATION SET");
        membershipDestinationJTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        membershipDestinationJTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                membershipDestinationJTextFieldMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout nodeMemebershipJPanel4Layout = new javax.swing.GroupLayout(nodeMemebershipJPanel4);
        nodeMemebershipJPanel4.setLayout(nodeMemebershipJPanel4Layout);
        nodeMemebershipJPanel4Layout.setHorizontalGroup(
            nodeMemebershipJPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nodeMemebershipJPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nodeMemebershipJPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nodeMemebershipJPanel4Layout.createSequentialGroup()
                        .addComponent(membershipTypeJLabel)
                        .addGap(68, 68, 68)
                        .addComponent(membershipTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(membershipSelectionJLabel)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(nodeMemebershipJPanel4Layout.createSequentialGroup()
                        .addComponent(membershipDestinationJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(membershipDestinationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(updateMembershipJButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        nodeMemebershipJPanel4Layout.setVerticalGroup(
            nodeMemebershipJPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nodeMemebershipJPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(nodeMemebershipJPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(membershipDestinationJLabel)
                    .addComponent(membershipDestinationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(nodeMemebershipJPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(membershipTypeJLabel)
                    .addComponent(membershipTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(membershipSelectionJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateMembershipJButton)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        functionsJTabbedPane1.addTab("Node Membership", nodeMemebershipJPanel4);

        scheduleJPanel2.setAutoscrolls(true);

        scheduleFunctionJButton.setText("Schedule Request");
        scheduleFunctionJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleFunctionJButtonActionPerformed(evt);
            }
        });

        scheduleRequestJLabel7.setText("Request");

        scheduleRequestNameJTextField1.setText("Request1");

        periodTimescaleJLabel.setText("Period");

        periodTimescaleJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SEC", "MIN", "HOUR", "DAY" }));
        periodTimescaleJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodTimescaleJComboBoxActionPerformed(evt);
            }
        });

        durationTimescaleJLabel.setText("Duration");

        durationTimescaleJComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SEC", "MIN", "HOUR", "DAY" }));

        actionJLabel.setText("Action");

        actionJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SENSING", "ACTUATING" }));
        actionJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionJComboBoxActionPerformed(evt);
            }
        });

        sensor_actuatorTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ACC X", "ACC Y", "ACC Z", "HUMIDITY", "IR", "LIGHT", "MAGNETIC X", "MAGNETIC Y", "SOUND", "TEMPERATURE", "ELECTRICITY", "ENERGY", "RX TIME", "SEND TIME", "SLEEP TIME", "RX SEND SLEEP TIME", "INTERNAL VOLTAGE", "LINK QTY - PARENT ID" }));
        sensor_actuatorTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sensor_actuatorTypeJComboBoxActionPerformed(evt);
            }
        });

        actuatorParamJLabel.setText("Actuator Param");

        actuatorParamJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NO_PARAM", "LED_0_TOGGLE", "LED_1_TOGGLE", "LED_2_TOGGLE" }));
        actuatorParamJComboBox.setEnabled(false);
        actuatorParamJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actuatorParamJComboBoxActionPerformed(evt);
            }
        });

        dataToRequestJLabel.setText("Data to request");

        dataToRequestJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SENSED DATA", "THRESHOLD NOTIFICATION" }));
        dataToRequestJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataToRequestJComboBoxActionPerformed(evt);
            }
        });

        syntheticDataTypeJLabel.setText("Synthetic data type");

        syntheticDataTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RAW", "AVERAGE", "MIN", "MAX" }));

        thresholdsToCheckJLabel.setText("Thresholds to check");

        thresholdsToCheckJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2" }));
        thresholdsToCheckJComboBox.setEnabled(false);

        sensorToSendIfThresholdJLabel.setText("Sensor to send if Thresholds exceeded");

        sensorToSendIfThresholdJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SAME SENSOR", "ACC X", "ACC Y", "ACC Z", "HUMIDITY", "IR", "LIGHT", "MAGNETIC X", "MAGNETIC Y", "SOUND", "TEMPERATURE", "ELECTRICITY", "ENERGY" }));
        sensorToSendIfThresholdJComboBox.setEnabled(false);

        threshold1TypeJLabel.setText("Threshold 1 type");

        threshold1TypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LOWER", "BIGGER", "TRANSITION" }));
        threshold1TypeJComboBox.setSelectedIndex(2);
        threshold1TypeJComboBox.setEnabled(false);

        threshold1ValueJLabel.setText("value");

        threshold1ValueJTextField.setEnabled(false);

        sensor4Threshold2JLabel.setText("Threshold 2 Sensor");

        sensor4Threshold2JComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ACC_X", "ACC_Y", "ACC_Z", "HUMIDITY", "IR", "LIGHT", "MAGNETIC_X", "MAGNETIC_Y", "SOUND", "TEMPERATURE", "ELECTRICITY", "ENERGY" }));
        sensor4Threshold2JComboBox.setEnabled(false);

        threshold2TypeJLabel.setText("type");

        threshold2TypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LOWER", "BIGGER" }));
        threshold2TypeJComboBox.setEnabled(false);

        threshold2ValueJLabel.setText("value");

        threshold2ValueJTextField.setEnabled(false);

        scheduleRequestNameJLabel.setText("Name");

        scheduleRequestIDJLabel.setText("ID");

        scheduleRequestIDJTextField.setEditable(false);
        scheduleRequestIDJTextField.setText("1");

        periodValueJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NO PERIOD", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60" }));

        durationValueJComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NO DURATION", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60" }));

        requestsAvailableJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DYNAMIC" }));
        requestsAvailableJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestsAvailableJComboBoxActionPerformed(evt);
            }
        });

        scheduleDestinationJLabel.setText("Schedule Destination");

        scheduleDestinationJTextField.setEditable(false);
        scheduleDestinationJTextField.setText("NO DESTINATION SET");
        scheduleDestinationJTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        scheduleDestinationJTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scheduleDestinationJTextFieldMouseClicked(evt);
            }
        });

        actuatorParamJTextField.setText("0");
        actuatorParamJTextField.setToolTipText("ActuatorParam - ONLY NUMBERS");
        actuatorParamJTextField.setEnabled(false);
        actuatorParamJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actuatorParamJTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scheduleJPanel2Layout = new javax.swing.GroupLayout(scheduleJPanel2);
        scheduleJPanel2.setLayout(scheduleJPanel2Layout);
        scheduleJPanel2Layout.setHorizontalGroup(
            scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(durationTimescaleJLabel)
                    .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                        .addComponent(sensor4Threshold2JLabel)
                        .addGap(18, 18, 18)
                        .addComponent(sensor4Threshold2JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(threshold2TypeJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(threshold2TypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(threshold2ValueJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(threshold2ValueJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                            .addComponent(scheduleDestinationJLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(scheduleDestinationJTextField))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, scheduleJPanel2Layout.createSequentialGroup()
                            .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(periodTimescaleJLabel)
                                .addComponent(scheduleRequestJLabel7)
                                .addComponent(actionJLabel)
                                .addComponent(actuatorParamJLabel)
                                .addComponent(dataToRequestJLabel)
                                .addComponent(thresholdsToCheckJLabel)
                                .addComponent(threshold1TypeJLabel))
                            .addGap(14, 14, 14)
                            .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                                    .addComponent(actuatorParamJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(actuatorParamJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                                .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                                    .addComponent(dataToRequestJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(syntheticDataTypeJLabel)
                                    .addGap(4, 4, 4)
                                    .addComponent(syntheticDataTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                                    .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                                            .addComponent(requestsAvailableJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(scheduleRequestNameJLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(scheduleRequestNameJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(19, 19, 19)
                                            .addComponent(scheduleRequestIDJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                                            .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(durationTimescaleJComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(periodTimescaleJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(durationValueJComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(periodValueJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(27, 27, 27)
                                    .addComponent(scheduleRequestIDJLabel))
                                .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                                    .addComponent(actionJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sensor_actuatorTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(scheduleFunctionJButton)
                                    .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                                        .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                                                .addComponent(thresholdsToCheckJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sensorToSendIfThresholdJLabel))
                                            .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                                                .addComponent(threshold1TypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(threshold1ValueJLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(threshold1ValueJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sensorToSendIfThresholdJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        scheduleJPanel2Layout.setVerticalGroup(
            scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scheduleDestinationJLabel)
                    .addComponent(scheduleDestinationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scheduleRequestJLabel7)
                    .addComponent(requestsAvailableJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scheduleRequestIDJLabel)
                    .addComponent(scheduleRequestNameJLabel)
                    .addComponent(scheduleRequestNameJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scheduleRequestIDJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scheduleJPanel2Layout.createSequentialGroup()
                        .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(periodTimescaleJLabel)
                            .addComponent(periodTimescaleJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(durationTimescaleJLabel)
                            .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(durationTimescaleJComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(durationValueJComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(periodValueJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actionJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sensor_actuatorTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actionJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actuatorParamJLabel)
                    .addComponent(actuatorParamJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actuatorParamJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataToRequestJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataToRequestJLabel)
                    .addComponent(syntheticDataTypeJLabel)
                    .addComponent(syntheticDataTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thresholdsToCheckJLabel)
                    .addComponent(thresholdsToCheckJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sensorToSendIfThresholdJLabel)
                    .addComponent(sensorToSendIfThresholdJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(threshold1TypeJLabel)
                    .addComponent(threshold1TypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threshold1ValueJLabel)
                    .addComponent(threshold1ValueJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sensor4Threshold2JLabel)
                    .addComponent(sensor4Threshold2JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threshold2ValueJLabel)
                    .addComponent(threshold2ValueJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threshold2TypeJLabel)
                    .addComponent(threshold2TypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scheduleFunctionJButton)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        functionsJTabbedPane1.addTab("Schedule", scheduleJPanel2);

        unscheduleFunctionJButton.setText("Unschedule Request");
        unscheduleFunctionJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unscheduleFunctionJButtonActionPerformed(evt);
            }
        });

        unscheduleRequestJLabel.setText("Request");

        unscheduleRequestNameJLabel.setText("Name");

        unscheduleRequestNameJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Request1", "Request2", "Request3", "Request4", "Request5" }));
        unscheduleRequestNameJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unscheduleRequestNameJComboBoxActionPerformed(evt);
            }
        });

        unscheduleRequestIDJTextField.setEditable(false);
        unscheduleRequestIDJTextField.setText("1");

        unscheduleRequestIDJLabel.setText("ID");

        unscheduleDestinationJLabel.setText("Unschedule Destination");

        unscheduleDestinationJTextField.setEditable(false);
        unscheduleDestinationJTextField.setText("NO DESTINATION SET");
        unscheduleDestinationJTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        unscheduleDestinationJTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unscheduleDestinationJTextFieldMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout unscheduleJPanel3Layout = new javax.swing.GroupLayout(unscheduleJPanel3);
        unscheduleJPanel3.setLayout(unscheduleJPanel3Layout);
        unscheduleJPanel3Layout.setHorizontalGroup(
            unscheduleJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unscheduleJPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(unscheduleJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(unscheduleJPanel3Layout.createSequentialGroup()
                        .addComponent(unscheduleRequestJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unscheduleRequestNameJLabel)
                        .addGap(18, 18, 18)
                        .addComponent(unscheduleRequestNameJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(unscheduleRequestIDJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unscheduleRequestIDJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(unscheduleJPanel3Layout.createSequentialGroup()
                        .addComponent(unscheduleDestinationJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unscheduleDestinationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, unscheduleJPanel3Layout.createSequentialGroup()
                .addContainerGap(231, Short.MAX_VALUE)
                .addComponent(unscheduleFunctionJButton)
                .addGap(110, 110, 110))
        );
        unscheduleJPanel3Layout.setVerticalGroup(
            unscheduleJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unscheduleJPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(unscheduleJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unscheduleDestinationJLabel)
                    .addComponent(unscheduleDestinationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(unscheduleJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unscheduleRequestJLabel)
                    .addComponent(unscheduleRequestNameJLabel)
                    .addComponent(unscheduleRequestNameJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unscheduleRequestIDJLabel)
                    .addComponent(unscheduleRequestIDJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76)
                .addComponent(unscheduleFunctionJButton)
                .addContainerGap(217, Short.MAX_VALUE))
        );

        functionsJTabbedPane1.addTab("Unschedule", unscheduleJPanel3);

        resetDestinationNodesJButton.setText("Reset Destination Formula Nodes");
        resetDestinationNodesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDestinationNodesJButtonActionPerformed(evt);
            }
        });

        resetDestinationJLabel1.setText("Reset Destination");

        resetDestinationJTextField.setEditable(false);
        resetDestinationJTextField.setText("NO DESTINATION SET");
        resetDestinationJTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetDestinationJTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetDestinationJTextFieldMouseClicked(evt);
            }
        });
        resetDestinationJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDestinationJTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resetJPanel5Layout = new javax.swing.GroupLayout(resetJPanel5);
        resetJPanel5.setLayout(resetJPanel5Layout);
        resetJPanel5Layout.setHorizontalGroup(
            resetJPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resetJPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resetJPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(resetJPanel5Layout.createSequentialGroup()
                        .addComponent(resetDestinationJLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetDestinationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(resetDestinationNodesJButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        resetJPanel5Layout.setVerticalGroup(
            resetJPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resetJPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resetJPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetDestinationJLabel1)
                    .addComponent(resetDestinationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addComponent(resetDestinationNodesJButton)
                .addContainerGap(267, Short.MAX_VALUE))
        );

        functionsJTabbedPane1.addTab("Reset", resetJPanel5);

        functionsJTabbedPane1.setSelectedIndex(1);

        functionsJLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        functionsJLabel.setText("REQUESTS");

        consoleJTextArea.setColumns(20);
        consoleJTextArea.setRows(5);
        jScrollPane7.setViewportView(consoleJTextArea);

        consoleJLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        consoleJLabel.setText("CONSOLE");

        saveConsoleJCheckBox.setText("Save data in a File");
        saveConsoleJCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveConsoleJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConsoleJCheckBoxActionPerformed(evt);
            }
        });

        nodeGroupHelpJButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        nodeGroupHelpJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bmf/images/InfoSmall.png"))); // NOI18N
        nodeGroupHelpJButton.setToolTipText("info");
        nodeGroupHelpJButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        nodeGroupHelpJButton.setBorderPainted(false);
        nodeGroupHelpJButton.setContentAreaFilled(false);
        nodeGroupHelpJButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        nodeGroupHelpJButton.setPreferredSize(new java.awt.Dimension(25, 25));
        nodeGroupHelpJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeGroupHelpJButtonActionPerformed(evt);
            }
        });

        nodePropertiesJButton1.setText("<html>Manage Node<br />Membership</html>");
        nodePropertiesJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePropertiesJButton1ActionPerformed(evt);
            }
        });

        addGroupJButton1.setText("Configure");
        addGroupJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGroupJButton1ActionPerformed(evt);
            }
        });

        activeFunctionsJLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        activeFunctionsJLabel.setText("SCHEDULED REQUESTS");

        functionsJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Function 1", "Function 2", "Function 3", "Function 4", "Function 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        functionsJList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        functionsJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                functionsJListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(functionsJList);

        mapJPanelInit();

        javax.swing.GroupLayout mapJPanelLayout = new javax.swing.GroupLayout(mapJPanel);
        mapJPanel.setLayout(mapJPanelLayout);
        mapJPanelLayout.setHorizontalGroup(
            mapJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 473, Short.MAX_VALUE)
        );
        mapJPanelLayout.setVerticalGroup(
            mapJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mapContainerJPanelLayout = new javax.swing.GroupLayout(mapContainerJPanel);
        mapContainerJPanel.setLayout(mapContainerJPanelLayout);
        mapContainerJPanelLayout.setHorizontalGroup(
            mapContainerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapContainerJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mapContainerJPanelLayout.setVerticalGroup(
            mapContainerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mapContainerJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        groupsJLabel1.setFont(new java.awt.Font("Tahoma", 1, 14));
        groupsJLabel1.setText("MAP");

        functionDetailsJTextArea.setColumns(20);
        functionDetailsJTextArea.setEditable(false);
        functionDetailsJTextArea.setFont(new java.awt.Font("Monospaced", 0, 10));
        functionDetailsJTextArea.setLineWrap(true);
        functionDetailsJTextArea.setRows(5);
        functionDetailsJTextArea.setWrapStyleWord(true);
        jScrollPane5.setViewportView(functionDetailsJTextArea);

        functionDetailsJLabel.setText("Request Details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nodesJLabel)
                                .addGap(18, 18, 18)
                                .addComponent(nodeGroupHelpJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nodePropertiesJButton)
                            .addComponent(nodePropertiesJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(delGroupJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(groupPropertiesJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addGroupJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(groupsJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mapContainerJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(groupsJLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(functionsJLabel)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(activeFunctionsJLabel))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(functionDetailsJLabel)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(saveConsoleJCheckBox)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(addGroupJButton1))
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)))
                                    .addComponent(functionsJTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE))
                                .addGap(109, 109, 109)))
                        .addContainerGap())
                    .addComponent(consoleJLabel)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(functionsJLabel)
                    .addComponent(nodesJLabel)
                    .addComponent(nodeGroupHelpJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(groupsJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(functionsJTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(activeFunctionsJLabel)
                            .addComponent(functionDetailsJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(consoleJLabel)
                            .addComponent(saveConsoleJCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addGroupJButton1))
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addGroupJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delGroupJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(groupPropertiesJButton)
                                .addGap(133, 133, 133))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nodePropertiesJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nodePropertiesJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(134, 134, 134))
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addComponent(groupsJLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mapContainerJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        functionsJTabbedPane1.getAccessibleContext().setAccessibleName("Packets");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addGroupJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGroupJButtonActionPerformed
        NewGroupDialog dialog = new NewGroupDialog(new javax.swing.JFrame(), true);
        dialog.setDad(this); 
        dialog.setVisible(true);
    }//GEN-LAST:event_addGroupJButtonActionPerformed

    private void groupPropertiesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupPropertiesJButtonActionPerformed
        BMFGroup group = (BMFGroup)this.groupsJList.getSelectedValue();
        
        if(group != null){

            ManageGroupDialog dialog = new ManageGroupDialog(new javax.swing.JFrame(), true);
            dialog.setGroupAndDadAndPopulate(group, this);
            dialog.setVisible(true);
            
        }
        else JOptionPane.showMessageDialog(this, "No Group Selected!");
    }//GEN-LAST:event_groupPropertiesJButtonActionPerformed

    private void delGroupJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delGroupJButtonActionPerformed
        
        BMFGroup groupTemp = (BMFGroup)this.groupsJList.getSelectedValue();

        if(groupTemp != null ){
            
            int ret = JOptionPane.showConfirmDialog (this, "Do you want to delete the group \""+groupTemp.getName()+"\"?",
                                                     "Select please", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (ret == JOptionPane.YES_OPTION){
                removeGroup(groupTemp);
            }
        }
        else JOptionPane.showMessageDialog(this, "No Group Selected!");
    }//GEN-LAST:event_delGroupJButtonActionPerformed

    private void nodePropertiesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePropertiesJButtonActionPerformed
        BMFNode node = (BMFNode)this.nodesJList.getSelectedValue();
        
        if(node != null){
            NodePropertiesDialog dialog = new NodePropertiesDialog(new javax.swing.JFrame(), true);
            dialog.setAndShowNode(node);
            dialog.setVisible(true);
        }
        else JOptionPane.showMessageDialog(this, "No Node Selected!");
    }//GEN-LAST:event_nodePropertiesJButtonActionPerformed

    private void unscheduleFunctionJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unscheduleFunctionJButtonActionPerformed

        BMFRequest newReq;
        IConfigurationPacket conf = new ConfigurationPacket();
        
        if(unscheduleRequestNameJComboBox.getSelectedIndex() == -1){
            print("NO REQUEST TO UNSCHEDULE");
            JOptionPane.showMessageDialog(this, "No Request Selected!");
            return;
        }
        else{
            newReq = getBMFRequestByID(((RequestPerComboBox)unscheduleRequestNameJComboBox.getSelectedItem()).getRequestID());
        }

        if(newReq == null) {
            print("BMFRequest NOT LOADED!!!");
            return;
        }

        try {
            if(isDestinationFormulaNode){
           		conf.setDestinationNode(Integer.parseInt(destinationFormulaToElaborate));
            }
            else conf.setDestinationGroups(destinationFormulaToElaborate);
        } catch (Exception ex) {
           print("INVALID DESTINATION FORMULA!!!");
           return;
        }

        try{
        	conf.setConfigurationType(Constants.PKT_TYPE_CONFIGURATION_UNSCHEDULE);

//print(newReq.getStringDetails());

            manager.sendPacket(conf);

//            if(BMFRequestVector.contains(newReq)){
//                BMFRequestVector.remove(newReq);
//            }
            
            newReq.deactivate();

            functionDetailsJTextArea.setText("");
            this.updateScheduleRequestsAvailableJComboBox();
            this.updateUNScheduleRequestsAvailableJComboBox();
            updateRequestsJList();


        }catch(Exception e){
            print("WRONG CONFIGURATION PARAMETER!!!");
            e.printStackTrace();
            return;
        }

}//GEN-LAST:event_unscheduleFunctionJButtonActionPerformed

    private void updateMembershipJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMembershipJButtonActionPerformed
        int membershipType = membershipTypeJComboBox.getSelectedIndex();

        MembershipPacket memb = new MembershipPacket();
        try {
            if(isDestinationFormulaNode) memb.setDestinationNode(Integer.parseInt(destinationFormulaToElaborate));
            else memb.setDestinationGroups(destinationFormulaToElaborate);
        } catch (Exception ex) {
           print("INVALID DESTINATION FORMULA!!!");
        }
        memb.setMembershipType(membershipType);

        Object[] bmfgObj = this.membershipSelectionJList.getSelectedValues();

        if(bmfgObj.length == 0){
            JOptionPane.showMessageDialog(this, "No Group Selected!");
            
        }
        else{
            BMFGroup[] bmfg = new BMFGroup[bmfgObj.length];

            for(int i=0; i<bmfgObj.length; i++){
                bmfg[i] = (BMFGroup)bmfgObj[i];
            }

            int[] groupIDs = new int[bmfg.length];
            for(int i=0;i<bmfg.length;i++) {
                groupIDs[i] = bmfg[i].getGroupID();
            }

            memb.setGroupIDs(groupIDs);
            
            //18-02-2014
            storeTimestamp(System.currentTimeMillis(), 0, "UPDATE MEMBERSHIP",-1,-1,-1);
            
            
            try {
				manager.sendPacket(memb);
			} catch (IOException e) {
				e.printStackTrace();
			}

            this.updateNodeMemberships(isDestinationFormulaNode, destinationFormulaToElaborate,
                    membershipType,
                    bmfg);
        }
    }//GEN-LAST:event_updateMembershipJButtonActionPerformed

    private void actuatorParamJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actuatorParamJComboBoxActionPerformed
    }//GEN-LAST:event_actuatorParamJComboBoxActionPerformed

    private void resetDestinationNodesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetDestinationNodesJButtonActionPerformed
        ResetPacket rp = new ResetPacket();
        String resetSent = "RESET MESSAGE SENT TO ";
        
        if(!destinationFormulaToElaborate.equals("")){
            if(isDestinationFormulaNode){
                int destID = Integer.parseInt(destinationFormulaToElaborate);
                rp.setDestinationNode(destID);
                if(destID == Constants.ADDRESSEE_BROADCAST)
                    resetSent += "EVERY NODE!";
                else
                    resetSent += "NODE "+destinationFormulaToElaborate+ "!";
            }
            else{
                try {
                    rp.setDestinationGroups(destinationFormulaToElaborate);
                    resetSent += "GROUPS "+destinationFormulaToElaborate;
                } catch (InvalidPacketParametersException ex) {
                    print(ex.getError());
                    return;
                } 
            }

            //reset groups and request of the selected nodes
            try {
				manager.sendPacket(rp);
			} catch (IOException e) {
				e.printStackTrace();
			}
            print(resetSent);
            
            this.updateNodeMemberships(isDestinationFormulaNode, destinationFormulaToElaborate,
                Constants.MEMBERSHIP_TYPE_RESET, null);
            
            
            
         // AGGIUNGERE RIGA TIMESTAMPS SE SI STA SALVANDO IL CSV
            storeTimestamp(System.currentTimeMillis(), 0, "RESET REQ SENT", -1, -1, -1);
            
            
            
        }
    }//GEN-LAST:event_resetDestinationNodesJButtonActionPerformed

    private void requestsAvailableJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestsAvailableJComboBoxActionPerformed
        if(requestsAvailableJComboBox.getSelectedIndex() != 0)
            scheduleRequestNameJTextField1.setEnabled(false);
        else scheduleRequestNameJTextField1.setEnabled(true);

        scheduleRequestIDJTextField.setText(""+((RequestPerComboBox)requestsAvailableJComboBox.getSelectedItem()).getRequestID());
        scheduleRequestNameJTextField1.setText(((RequestPerComboBox)requestsAvailableJComboBox.getSelectedItem()).getName());
    }//GEN-LAST:event_requestsAvailableJComboBoxActionPerformed

    private void scheduleFunctionJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleFunctionJButtonActionPerformed
        BMFRequest newReq;
        IConfigurationPacket conf = new ConfigurationPacket();
        
        if(requestsAvailableJComboBox.getSelectedIndex() == 0){
            newReq = new BMFRequest(scheduleRequestNameJTextField1.getText(), 
            						this.getFirstBMFRequestIDAvailable(),
            						conf);
        }
        else{
            newReq = getBMFRequestByID(((RequestPerComboBox)requestsAvailableJComboBox.getSelectedItem()).getRequestID());
        }

        if(newReq == null) {
            print("BMFRequest NOT LOADED!!!");
            return;
        }

        try {
            if(isDestinationFormulaNode) conf.setDestinationNode(Integer.parseInt(destinationFormulaToElaborate));
            else conf.setDestinationGroups(destinationFormulaToElaborate);
        } catch (Exception ex) {
           print("INVALID DESTINATION FORMULA!!!");
           return;
        }

        try{
        	conf.setConfigurationType(Constants.PKT_TYPE_CONFIGURATION_SCHEDULE);
        	conf.setPeriodTimescale(periodTimescaleJComboBox.getSelectedIndex());
        	conf.setPeriodValue(periodValueJComboBox.getSelectedIndex());
        	conf.setLifetimeTimescale(durationTimescaleJComboBox2.getSelectedIndex());
        	conf.setLifetimeValue(durationValueJComboBox2.getSelectedIndex());
        	conf.setAction(actionJComboBox.getSelectedIndex());
        	conf.setSensor_actuatorType(sensor_actuatorTypeJComboBox.getSelectedIndex()+1);
            //newReq.setActuatorParams(actuatorParamJComboBox.getSelectedIndex());
        	conf.setActuatorParams(Integer.parseInt(actuatorParamJTextField.getText()));
        	conf.setDataType(dataToRequestJComboBox.getSelectedIndex());
        	conf.setSyntheticData(syntheticDataTypeJComboBox.getSelectedIndex());
            int thresholdNumber = thresholdsToCheckJComboBox.getSelectedIndex();
            conf.setThresholdNumber(thresholdNumber);
            conf.setSensorIfThreshold(sensorToSendIfThresholdJComboBox.getSelectedIndex());

            if(thresholdNumber > 0){
                int thresholdType[] = new int[thresholdNumber];
                int thresholdValue[] = new int[thresholdNumber];
                int sensorTypeMoreThreshold[] = new int[thresholdNumber - 1];

                thresholdType[0] = threshold1TypeJComboBox.getSelectedIndex();
                thresholdValue[0] = Integer.parseInt(threshold1ValueJTextField.getText());


                if(thresholdNumber >= 2){
                    thresholdType[1] = threshold2TypeJComboBox.getSelectedIndex();
                    thresholdValue[1] = Integer.parseInt(threshold2ValueJTextField.getText());
                    sensorTypeMoreThreshold[0] = sensor4Threshold2JComboBox.getSelectedIndex() + 1;
                }

                conf.setThresholdType(thresholdType);
                conf.setThresholdValue(thresholdValue);
                conf.setSensorTypeMoreThreshold(sensorTypeMoreThreshold);
        }
//print(newReq.getStringDetails());

            
            // AGGIUNGERE RIGA TIMESTAMPS SE SI STA SALVANDO IL CSV
            //storeTimestamp(timestamp, sender, what, requestID);
            
            String actionReq;
            if(conf.getAction()==Constants.ACTION_SENSING) actionReq = "SCHEDULE SENSING";
            else actionReq = "SCHEDULE ACTUATION";
            
            storeTimestamp(System.currentTimeMillis(), 0, actionReq, newReq.getRequestID(), -1, -1);
            
            
            manager.sendPacket(conf);
            newReq.activate(this);

            if(BMFRequestVector.contains(newReq)){
                BMFRequestVector.remove(newReq);
            }
            BMFRequestVector.addElement(newReq);


            this.updateScheduleRequestsAvailableJComboBox();
            this.updateUNScheduleRequestsAvailableJComboBox();
            updateRequestsJList();

        }catch(Exception e){
            print("WRONG CONFIGURATION PARAMETER!!!");
            e.printStackTrace();
            return;
        }


    }//GEN-LAST:event_scheduleFunctionJButtonActionPerformed

    private void periodTimescaleJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periodTimescaleJComboBoxActionPerformed
}//GEN-LAST:event_periodTimescaleJComboBoxActionPerformed

    private void actionJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionJComboBoxActionPerformed
        if(actionJComboBox.getSelectedIndex() == Constants.ACTION_SENSING){
            sensor_actuatorTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ACC X", "ACC Y", "ACC Z", "HUMIDITY", "IR", "LIGHT", "MAGNETIC X", "MAGNETIC Y", "SOUND", "TEMPERATURE", "ELECTRICITY", "ENERGY", "RX TIME", "SEND TIME", "SLEEP TIME", "RX SEND SLEEP TIME", "INTERNAL VOLTAGE", "LINK QTY - PARENT ID"}));
            //sensor_actuatorTypeJLabel.setText("Sensor Type");
            actuatorParamJComboBox.setEnabled(false);
            actuatorParamJTextField.setEnabled(false);
            dataToRequestJComboBox.setEnabled(true);

            syntheticDataTypeJComboBox.setEnabled(true);
            thresholdsToCheckJComboBox.setEnabled(true);
            sensorToSendIfThresholdJComboBox.setEnabled(true);
            threshold1TypeJComboBox.setEnabled(true);
            threshold1ValueJTextField.setEnabled(true);
            threshold2TypeJComboBox.setEnabled(true);
            threshold2ValueJTextField.setEnabled(true);
            sensor4Threshold2JComboBox.setEnabled(true);
        }
        else if(actionJComboBox.getSelectedIndex() == Constants.ACTION_ACTUATING){
            sensor_actuatorTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  "LOW POWER DUTY CYCLE", "LED", "DYNAMIC LENGHT PACKET" }));
            //sensor_actuatorTypeJLabel.setText("Actuator Type");
            actuatorParamJComboBox.setEnabled(true);
            actuatorParamJTextField.setEnabled(true);
            dataToRequestJComboBox.setEnabled(false);

            syntheticDataTypeJComboBox.setEnabled(false);
            thresholdsToCheckJComboBox.setEnabled(false);
            sensorToSendIfThresholdJComboBox.setEnabled(false);
            threshold1TypeJComboBox.setEnabled(false);
            threshold1ValueJTextField.setEnabled(false);
            threshold2TypeJComboBox.setEnabled(false);
            threshold2ValueJTextField.setEnabled(false);
            sensor4Threshold2JComboBox.setEnabled(false);

        }
    }//GEN-LAST:event_actionJComboBoxActionPerformed

    private void membershipTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_membershipTypeJComboBoxActionPerformed
    }//GEN-LAST:event_membershipTypeJComboBoxActionPerformed

    private void unscheduleRequestNameJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unscheduleRequestNameJComboBoxActionPerformed
        if(((RequestPerComboBox)unscheduleRequestNameJComboBox.getSelectedItem()) != null)
            unscheduleRequestIDJTextField.setText(""+((RequestPerComboBox)unscheduleRequestNameJComboBox.getSelectedItem()).getRequestID());
        else unscheduleRequestIDJTextField.setText("");
    }//GEN-LAST:event_unscheduleRequestNameJComboBoxActionPerformed

    private void dataToRequestJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataToRequestJComboBoxActionPerformed
        if(dataToRequestJComboBox.getSelectedIndex() == 0){
            // data from sensor request
            thresholdsToCheckJComboBox.setEnabled(false);
            sensorToSendIfThresholdJComboBox.setEnabled(false);
            threshold1TypeJComboBox.setEnabled(false);
            threshold1ValueJTextField.setEnabled(false);
            sensor4Threshold2JComboBox.setEnabled(false);
            threshold2TypeJComboBox.setEnabled(false);
            threshold2ValueJTextField.setEnabled(false);
        }
        else if(dataToRequestJComboBox.getSelectedIndex() == 1){
            // threshold data request
            thresholdsToCheckJComboBox.setEnabled(true);
            sensorToSendIfThresholdJComboBox.setEnabled(true);
            threshold1TypeJComboBox.setEnabled(true);
            threshold1ValueJTextField.setEnabled(true);
            sensor4Threshold2JComboBox.setEnabled(true);
            threshold2TypeJComboBox.setEnabled(true);
            threshold2ValueJTextField.setEnabled(true);
        }
    }//GEN-LAST:event_dataToRequestJComboBoxActionPerformed

    private void nodeGroupHelpJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeGroupHelpJButtonActionPerformed
        NodeAndGroupHelpDialog dialog = new NodeAndGroupHelpDialog(new javax.swing.JFrame(), true);
        
        dialog.setVisible(true);
    }//GEN-LAST:event_nodeGroupHelpJButtonActionPerformed

    private void nodePropertiesJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePropertiesJButton1ActionPerformed
        BMFNode node = (BMFNode)this.nodesJList.getSelectedValue();
        
        if(node != null){
            ManageNodeDialog dialog = new ManageNodeDialog(new javax.swing.JFrame(), true);
            dialog.setNodeAndDadAndPopulate(node, this);
            dialog.setVisible(true);
        }
        else JOptionPane.showMessageDialog(this, "No Node Selected!");

    }//GEN-LAST:event_nodePropertiesJButton1ActionPerformed

    private void saveConsoleJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConsoleJCheckBoxActionPerformed
//    private FileWriter csvWriter;
//    private String outCsvWriterPath= "/cvs/";
//    private boolean isStoringCVS = false;
//    private boolean isStoringNodes = false;
//    private boolean isStoringAllData = true;
//    private Vector<BMFNode> storingInBMFNodeVector = new Vector();
//    private Vector<BMFGroup> storingInBMFGroupVector = new Vector();

        try{
            if(isStoringCVS){
                csvWriter.flush();
                csvWriter.close();
                isStoringCVS = false;
                
                if (isStoringTimestamps) {
					csvWriterTimestamps.flush();
					csvWriterTimestamps.close();
				}
            }
            else{

                File file = new File(outCsvWriterPath);
                if(!file.exists()){
                    file.mkdir();
                }
                long currTime = System.currentTimeMillis();
//                this.getClass().getResource(outCsvWriterPath+"/"+System.currentTimeMillis()+".csv").getFile()
                csvWriter = new FileWriter(outCsvWriterPath + currTime + ".csv");

                if(isStoringAllData) csvWriter.write("DATA FROM ALL THE NODES;\n");
                else if(isStoringNodes){
                    String temp = "DATA FROM SELECTED NODES: ";
                    if(storingInBMFNodeVector.size() > 0)
                        temp += storingInBMFNodeVector.elementAt(0).toString();
                    for(int i=1; i<storingInBMFNodeVector.size();i++){
                        temp += " - " + storingInBMFNodeVector.elementAt(i).toString();
                    }
                    csvWriter.write(temp+"\n");
                }
                else{
                    String temp = "DATA FROM SELECTED GROUPS: ";
                    if(storingInBMFGroupVector.size() > 0)
                        temp += storingInBMFGroupVector.elementAt(0).toString();
                    for(int i=1; i<storingInBMFGroupVector.size();i++){
                        temp += " - " + storingInBMFGroupVector.elementAt(i).toString();
                    }
                    csvWriter.write(temp+"\n");
                }

                String columnNames = "TIME;SENDER_ID;COUNTER;REQUEST_ID;SENSOR;RESULT1;RESULT2;RESULT3;";

                csvWriter.write(columnNames+"\n");

                csvWriter.flush();

                isStoringCVS = true;
                
                
                
                
                if (isStoringTimestamps) {
					//18-02-2014 - Timestamps
					csvWriterTimestamps = new FileWriter(outCsvWriterPath
							+ currTime + "_timestamps.csv");
					//DEFINIRE CAMPI DA INSERIRE QUI
					String columnNamesTimestamps = "TIMESTAMP;SENDER_ID;WHAT;REQUEST_ID;PKT_TYPE_TO_ACK;ACK_PARAM;";
					csvWriterTimestamps.write(columnNamesTimestamps + "\n");
					csvWriterTimestamps.flush();
				}
                
                
                
            }
        }catch(IOException e){
            print(""+e);
            e.printStackTrace();
            saveConsoleJCheckBox.setSelected(false);
        }

    }//GEN-LAST:event_saveConsoleJCheckBoxActionPerformed

    
  //CONTROLLA storeTimestamp
    void storeTimestamp(long timestamp, int sender, String what, int requestID, int pktTypeToAck, int param){
    	
    	//storeTimestamp(time.getTimeInMillis(), senderID, "ACK RECEIVED", -1, pktTypeToAck, param);
    	//storeTimestamp(System.currentTimeMillis(), 0, "SCHEDULE REQUEST", newReq.getRequestID());
    	
		if (isStoringCVS && isStoringTimestamps) {
			try {
				
				String toPrint;
				if(requestID > 0){
					toPrint = timestamp + ";" + sender + ";" + what	+ ";" + requestID + ";" + "-" + ";" + "-;"  + "\n";
				}
				else if(pktTypeToAck > 0){
					toPrint = timestamp + ";" + sender + ";" + what	+ ";" + "-" + ";" + pktTypeToAck + ";" + param + ";"  + "\n";
				}
				else{
					toPrint = timestamp + ";" + sender + ";" + what	+ ";" + requestID + ";" + pktTypeToAck + ";" + param + ";"  + "\n";
				}
				
				csvWriterTimestamps.write(toPrint);
				csvWriterTimestamps.flush();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
    }
    
    
    
    private void addGroupJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGroupJButton1ActionPerformed
        if(!this.isStoringCVS){
            SaveOptionsDialog dialog = new SaveOptionsDialog(new javax.swing.JFrame(), true);
            dialog.setDadAndPopulate(this);
            dialog.setVisible(true);
        }
        else JOptionPane.showMessageDialog(this, "Store operation already running, stop it and click Properties!");
}//GEN-LAST:event_addGroupJButton1ActionPerformed

    private void functionsJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_functionsJListMouseClicked
        updateFunctionDetailsTextWithSelectedFunction();
    }//GEN-LAST:event_functionsJListMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int ret = JOptionPane.showConfirmDialog (this, "DO YOU WANT TO EXIT?",
                                         "EXIT?", JOptionPane.YES_NO_OPTION,
                                         JOptionPane.WARNING_MESSAGE);

        if (ret == JOptionPane.YES_OPTION)
            System.exit (0);
    }//GEN-LAST:event_formWindowClosing

    private void sensor_actuatorTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensor_actuatorTypeJComboBoxActionPerformed
    }//GEN-LAST:event_sensor_actuatorTypeJComboBoxActionPerformed

    private void membershipDestinationJTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_membershipDestinationJTextFieldMouseClicked
        loadDestinationDialog();
    }//GEN-LAST:event_membershipDestinationJTextFieldMouseClicked

    private void scheduleDestinationJTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scheduleDestinationJTextFieldMouseClicked
        loadDestinationDialog();
    }//GEN-LAST:event_scheduleDestinationJTextFieldMouseClicked

    private void unscheduleDestinationJTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unscheduleDestinationJTextFieldMouseClicked
        loadDestinationDialog();
    }//GEN-LAST:event_unscheduleDestinationJTextFieldMouseClicked

    private void resetDestinationJTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetDestinationJTextFieldMouseClicked
        loadDestinationDialog();
    }//GEN-LAST:event_resetDestinationJTextFieldMouseClicked

    private void resetDestinationJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetDestinationJTextFieldActionPerformed
    }//GEN-LAST:event_resetDestinationJTextFieldActionPerformed

    private void actuatorParamJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actuatorParamJTextFieldActionPerformed
    }//GEN-LAST:event_actuatorParamJTextFieldActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
//        final String a,b,c;
//        
//        if(args.length<2){ // || args[0]==null || args[0].isEmpty() || args[1]==null || args[1].isEmpty()){
//            System.out.println("ERROR: THE CORRECT WAY TO EXECUTE THE APPLICATION IS RUNNING\n"+
//                                "     java -jar BMF.jar \"YOUR_BASESTATION_SERIAL\" \"YOUR_MOTE_TYPE(e.g.<telosb>)\"");
//        }
//        else{
//            a = args[0];
//            b = args[1];
//            if(args.length>2) c = args[2];
//            else c = "";
//
//            java.awt.EventQueue.invokeLater(new Runnable() {
//                @Override
//                public void run() {
//                    new GUIFrame(a, b, c).setVisible(true);
//                }
//            });
//        }
    	
    	final String c;
    	if(args.length>2) c = args[2];
    	else c = "";
    	
    	java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUIFrame(c).setVisible(true);
            }
        });
    	
    	
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox actionJComboBox;
    private javax.swing.JLabel actionJLabel;
    private javax.swing.JLabel activeFunctionsJLabel;
    private javax.swing.JComboBox actuatorParamJComboBox;
    private javax.swing.JLabel actuatorParamJLabel;
    private javax.swing.JTextField actuatorParamJTextField;
    private javax.swing.JButton addGroupJButton;
    private javax.swing.JButton addGroupJButton1;
    private javax.swing.JLabel consoleJLabel;
    private javax.swing.JTextArea consoleJTextArea;
    private javax.swing.JComboBox dataToRequestJComboBox;
    private javax.swing.JLabel dataToRequestJLabel;
    private javax.swing.JButton delGroupJButton;
    private javax.swing.JComboBox durationTimescaleJComboBox2;
    private javax.swing.JLabel durationTimescaleJLabel;
    private javax.swing.JComboBox durationValueJComboBox2;
    private javax.swing.JLabel functionDetailsJLabel;
    private javax.swing.JTextArea functionDetailsJTextArea;
    private javax.swing.JLabel functionsJLabel;
    private javax.swing.JList functionsJList;
    private javax.swing.JTabbedPane functionsJTabbedPane1;
    private javax.swing.JButton groupPropertiesJButton;
    private javax.swing.JLabel groupsJLabel;
    private javax.swing.JLabel groupsJLabel1;
    private javax.swing.JList groupsJList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel mapContainerJPanel;
    private javax.swing.JPanel mapJPanel;
    private javax.swing.JLabel membershipDestinationJLabel;
    private javax.swing.JTextField membershipDestinationJTextField;
    private javax.swing.JLabel membershipSelectionJLabel;
    private javax.swing.JList membershipSelectionJList;
    private javax.swing.JComboBox membershipTypeJComboBox;
    private javax.swing.JLabel membershipTypeJLabel;
    private javax.swing.JButton nodeGroupHelpJButton;
    private javax.swing.JPanel nodeMemebershipJPanel4;
    private javax.swing.JButton nodePropertiesJButton;
    private javax.swing.JButton nodePropertiesJButton1;
    private javax.swing.JLabel nodesJLabel;
    private javax.swing.JList nodesJList;
    private javax.swing.JComboBox periodTimescaleJComboBox;
    private javax.swing.JLabel periodTimescaleJLabel;
    private javax.swing.JComboBox periodValueJComboBox;
    private javax.swing.JComboBox requestsAvailableJComboBox;
    private javax.swing.JLabel resetDestinationJLabel1;
    private javax.swing.JTextField resetDestinationJTextField;
    private javax.swing.JButton resetDestinationNodesJButton;
    private javax.swing.JPanel resetJPanel5;
    private javax.swing.JCheckBox saveConsoleJCheckBox;
    private javax.swing.JLabel scheduleDestinationJLabel;
    private javax.swing.JTextField scheduleDestinationJTextField;
    private javax.swing.JButton scheduleFunctionJButton;
    private javax.swing.JPanel scheduleJPanel2;
    private javax.swing.JLabel scheduleRequestIDJLabel;
    private javax.swing.JTextField scheduleRequestIDJTextField;
    private javax.swing.JLabel scheduleRequestJLabel7;
    private javax.swing.JLabel scheduleRequestNameJLabel;
    private javax.swing.JTextField scheduleRequestNameJTextField1;
    private javax.swing.JComboBox sensor4Threshold2JComboBox;
    private javax.swing.JLabel sensor4Threshold2JLabel;
    private javax.swing.JComboBox sensorToSendIfThresholdJComboBox;
    private javax.swing.JLabel sensorToSendIfThresholdJLabel;
    private javax.swing.JComboBox sensor_actuatorTypeJComboBox;
    private javax.swing.JComboBox syntheticDataTypeJComboBox;
    private javax.swing.JLabel syntheticDataTypeJLabel;
    private javax.swing.JComboBox threshold1TypeJComboBox;
    private javax.swing.JLabel threshold1TypeJLabel;
    private javax.swing.JLabel threshold1ValueJLabel;
    private javax.swing.JTextField threshold1ValueJTextField;
    private javax.swing.JComboBox threshold2TypeJComboBox;
    private javax.swing.JLabel threshold2TypeJLabel;
    private javax.swing.JLabel threshold2ValueJLabel;
    private javax.swing.JTextField threshold2ValueJTextField;
    private javax.swing.JComboBox thresholdsToCheckJComboBox;
    private javax.swing.JLabel thresholdsToCheckJLabel;
    private javax.swing.JLabel unscheduleDestinationJLabel;
    private javax.swing.JTextField unscheduleDestinationJTextField;
    private javax.swing.JButton unscheduleFunctionJButton;
    private javax.swing.JPanel unscheduleJPanel3;
    private javax.swing.JLabel unscheduleRequestIDJLabel;
    private javax.swing.JTextField unscheduleRequestIDJTextField;
    private javax.swing.JLabel unscheduleRequestJLabel;
    private javax.swing.JComboBox unscheduleRequestNameJComboBox;
    private javax.swing.JLabel unscheduleRequestNameJLabel;
    private javax.swing.JButton updateMembershipJButton;
    // End of variables declaration//GEN-END:variables







 ////////////////////////////////////////////////////////////////////////////////////////////
 // HERE IS STARTING BMF LOGIC (SOMETHING IS ALREADY IN THE IMPLEMENTATION OF THE EVENTS
 // AND IN THE CONSTRUCTOR)
 ////////////////////////////////////////////////////////////////////////////////////////////






    //OTHER VARIABLE DECLARATION
    Vector<BMFNode> BMFNodeVector = new Vector();
    Vector<BMFGroup> BMFGroupVector = new Vector();
    Vector<BMFRequest> BMFRequestVector = new Vector();
    //LowLevelBMFManager manager;
    NetworkManager manager;

    String destinationFormulaToShow="";
    String destinationFormulaToElaborate="";
    boolean isDestinationFormulaNode=true;
    boolean waiting4GroupInDestinationFormula=true;

    private boolean isApplicationStarted = false;

    //Storing stuff
    private FileWriter csvWriter;
    private FileWriter csvWriterTimestamps;
    private String outCsvWriterPath= "csv/";
    private boolean isStoringCVS = false;
    boolean isStoringNodes = false;
    boolean isStoringAllData = true;
    boolean isStoringTimestamps = true;
    Vector<BMFNode> storingInBMFNodeVector = new Vector();
    Vector<BMFGroup> storingInBMFGroupVector = new Vector();

    private String mapFileName;
    //




    /**
     * This method prints the String in the console and, eventually, in the text file
     * @param s
     */
    public void print(String s){
        try{
            if(this.consoleJTextArea.getDocument().getLength() % 1000 == 0){
                this.consoleJTextArea.setText(s+"\n");
            }
            else{

                this.consoleJTextArea.append(s+"\n");
                //this.consoleJTextArea.
                this.consoleJTextArea.setCaretPosition(this.consoleJTextArea.getDocument().getLength());
            }
            
        }catch(Exception e){}
    }

    private void myInit(){
//        try {
            updateNodesJList();
            updateGroupsJLists();
            updateScheduleRequestsAvailableJComboBox();
            updateUNScheduleRequestsAvailableJComboBox();
            updateRequestsJList();
            //resetDestinationFormula();

            isApplicationStarted = true;

//            String path = "C:/Users/Antonio/Desktop/officePlan.bmp";
//            BufferedImage image = ImageIO.read(new File(path));
//            MapJPanel mapJPanel = new MapJPanel(image);
//            mapJPanel.setBounds(mapContainerJPanel.getBounds());
//
//            mapContainerJPanel.add(mapJPanel);


//        } catch (IOException ex) {
//            ex.printStackTrace();
//        }
    }

    private void mapJPanelInit(){
         try {



            String path = "/bmf/images/";
            
            if(mapFileName.equals("")) path += "map2.jpg";
            else path += mapFileName;

            BufferedImage image = ImageIO.read(this.getClass().getResource(path));
                    //ImageIO.read(new File(path));
            //mapJPanel = new MapJPanel(image);
            mapJPanel = new MapJPanel(image);
//            mapJPanel.setBounds(mapContainerJPanel.getBounds());

            //mapContainerJPanel.add(mapJPanel);





        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private boolean nodeIsUnknown(BMFNode newNode){
        for(int i=0;i<this.BMFNodeVector.size();i++){
            if(((BMFNode)this.BMFNodeVector.elementAt(i)).getNodeID() == newNode.getNodeID())
                return false;
        }
        return true;
    }

    private void updateNodesJList(){
        this.nodesJList.removeAll();
        this.nodesJList.setListData(this.BMFNodeVector);
    }

    private void updateGroupsJLists(){
        this.groupsJList.removeAll();
        this.groupsJList.setListData(this.BMFGroupVector);
        this.membershipSelectionJList.removeAll();
        this.membershipSelectionJList.setListData(this.BMFGroupVector);
    }

    private void updateRequestsJList(){
        this.functionsJList.removeAll();
        this.functionsJList.setListData(this.BMFRequestVector);
    }

    private void updateScheduleRequestsAvailableJComboBox(){
        RequestPerComboBox[] requestsCombo = getRequestsPerScheduleComboBoxFromBMFRequestVector();
        requestsAvailableJComboBox.setModel( new javax.swing.DefaultComboBoxModel(requestsCombo));

        scheduleRequestIDJTextField.setText(""+((RequestPerComboBox)requestsAvailableJComboBox.getSelectedItem()).getRequestID());
        scheduleRequestNameJTextField1.setText(((RequestPerComboBox)requestsAvailableJComboBox.getSelectedItem()).getName());
    }

    private void updateUNScheduleRequestsAvailableJComboBox(){
        RequestPerComboBox[] requestsCombo = getRequestsPerUNScheduleComboBoxFromBMFRequestVector();
        unscheduleRequestNameJComboBox.setModel( new javax.swing.DefaultComboBoxModel(requestsCombo));

        if(((RequestPerComboBox)unscheduleRequestNameJComboBox.getSelectedItem()) != null)
            unscheduleRequestIDJTextField.setText(""+((RequestPerComboBox)unscheduleRequestNameJComboBox.getSelectedItem()).getRequestID());
        else unscheduleRequestIDJTextField.setText("");

    }


    @Override
    public void newNodeInTheNetwork(IBMFNode newNode, java.util.Calendar time) {
    			
        if(nodeIsUnknown((BMFNode)newNode) && isApplicationStarted ){
            // here we have to add the node to our list and update the nodesJList
            this.BMFNodeVector.addElement((BMFNode)newNode);
            updateNodesJList();
            print(time.getTime()+ " NEW NODE IN THE NETWORK WITH ID " + newNode.getNodeID() + "and Functions enabled number "+ newNode.getFunctions()[0] +"!!!");
            
            
            ((MapJPanel)this.mapJPanel).newNode((BMFNode)newNode);
        }
    }


    @Override
    public void newDataIn(IBMFDataIn data, java.util.Calendar time) {
		
        String toPrint = time.getTime()+ " Message from NODE"+data.getSenderID() +
                " To the request n." +data.getRequestID() + " - Result: "+data.getResult();
        
        //toPrint += " - "+data.getResult();
        
        
        print(toPrint);

        if(this.isStoringCVS){

            //Let's check if we have to store from the current node
            boolean toStore = false;
            if(this.isStoringAllData) toStore = true;
            else if(this.isStoringNodes){
                for(int i=0; i<this.storingInBMFNodeVector.size();i++){
                    if(this.storingInBMFNodeVector.elementAt(i).getNodeID() == data.getSenderID()){
                        toStore = true;
                        break;
                    }
                }
            }
            else{
                for(int i=0; i<this.storingInBMFGroupVector.size();i++){
                    BMFGroup temp = this.storingInBMFGroupVector.elementAt(i);
                    for(int j=0; j<temp.getNodes().size();j++){
                        if(temp.getNodes().elementAt(j).getNodeID() == data.getSenderID()){
                            toStore = true;
                            break;
                        }
                    }
                }
            }

            if(toStore){
                try{

                    BMFRequest bmfReq = getBMFRequestByID(data.getRequestID());

                    if(bmfReq != null){
                        String dataToStore =
                                ""+time.getTime()+";"+
                                data.getSenderID()+";"+
                                data.getCounter()+";"+
                                data.getRequestID()+";"+
                                CodeConversion.getSensorName(bmfReq.getIConfiguration().getSensor_actuatorType())+";"+
                                data.getResult()+";";

                        
                        
                        
                        //for(int s=1; s<data.length; s++){
                            dataToStore += data.getResult()+";";
                        //}

                        csvWriter.write(dataToStore+"\n");
                        csvWriter.flush();
                    }
                }catch(IOException e){
                    print(""+e);
                    e.printStackTrace();
                }
            }
            
            // if timestamps have to be added to the Timestamps file, add them here!           
            
            
        }

    }

    //OLD newDataIn with data as an array
    /*
    public void newDataIn(IBMFDataIn data[], java.util.Calendar time) {
    			
        String toPrint = time.getTime()+ " Message from NODE"+data[0].getSenderID() +
                " To the request n." +data[0].getRequestID() + " - Result: "+data[0].getResult();
        
        for(int s=1; s<data.length; s++){
            toPrint += " - "+data[s].getResult();
        }
        
        print(toPrint);

        if(this.isStoringCVS){

            //Let's check if we have to store from the current node
            boolean toStore = false;
            if(this.isStoringAllData) toStore = true;
            else if(this.isStoringNodes){
                for(int i=0; i<this.storingInBMFNodeVector.size();i++){
                    if(this.storingInBMFNodeVector.elementAt(i).getNodeID() == data[0].getSenderID()){
                        toStore = true;
                        break;
                    }
                }
            }
            else{
                for(int i=0; i<this.storingInBMFGroupVector.size();i++){
                    BMFGroup temp = this.storingInBMFGroupVector.elementAt(i);
                    for(int j=0; j<temp.getNodes().size();j++){
                        if(temp.getNodes().elementAt(j).getNodeID() == data[0].getSenderID()){
                            toStore = true;
                            break;
                        }
                    }
                }
            }

            if(toStore){
                try{

                    BMFRequest bmfReq = getBMFRequestByID(data[0].getRequestID());

                    if(bmfReq != null){
                        String dataToStore =
                                ""+time.getTime()+";"+
                                data[0].getSenderID()+";"+
                                data[0].getCounter()+";"+
                                data[0].getRequestID()+";"+
                                CodeConversion.getSensorName(bmfReq.getSensor_actuatorType())+";"+
                                data[0].getResult()+";";

                        for(int s=1; s<data.length; s++){
                            dataToStore += data[s].getResult()+";";
                        }

                        csvWriter.write(dataToStore+"\n");
                        csvWriter.flush();
                    }
                }catch(IOException e){
                    print(""+e);
                    e.printStackTrace();
                }
            }
        }

    }
    */


    @Override
    public void ackReceived(int senderID, int pktTypeToAck, int param, java.util.Calendar time) {
        print(time.getTime()+ " ACK from NODE"+senderID+" for packet Type "+ pktTypeToAck + " with parameter "+ param);
        
        
        // AGGIUNGERE RIGA TIMESTAMPS SE SI STA SALVANDO IL CSV
      //storeTimestamp(timestamp, sender, what, requestID);
        storeTimestamp(time.getTimeInMillis(), senderID, "ACK RECEIVED", -1, pktTypeToAck, param);
        
        
        
    }


    private int getFirstBMFGroupIDAvailable(){
        if(this.BMFGroupVector.size() >= Constants.GROUP_ID_MAX_ID_AVAILABLE){
            return Constants.GROUP_ID_MAX_ID_AVAILABLE+1;
        }

        //naive algoritm to find the first ID available
        int[] free = new int[Constants.GROUP_ID_MAX_ID_AVAILABLE]; // free[i] will be 1 if the id 1 is used
        for(int i=0; i<this.BMFGroupVector.size();i++)
            free[BMFGroupVector.elementAt(i).getGroupID() - 1] = 1;
        for(int i=0; i<Constants.GROUP_ID_MAX_ID_AVAILABLE;i++)
            if(free[i]!=1) return i+1;

        return Constants.GROUP_ID_MAX_ID_AVAILABLE+1;
    }

    private int getFirstBMFRequestIDAvailable() {
        if(this.BMFRequestVector.size() >= Constants.REQUEST_ID_MAX_VALUE){
            return Constants.REQUEST_ID_MAX_VALUE+1;
        }

        //naive algoritm to find the first ID available
        int[] free = new int[Constants.REQUEST_ID_MAX_VALUE]; // free[i] will be 1 if the id 1 is used
        for(int i=0; i<this.BMFRequestVector.size();i++)
            free[BMFRequestVector.elementAt(i).getRequestID() - 1] = 1; // zero is not an accepted value
        for(int i=0; i<Constants.REQUEST_ID_MAX_VALUE;i++)
            if(free[i]!=1) return i+1;

        return Constants.REQUEST_ID_MAX_VALUE+1;
    }

    public void newGroupCreated(String name){
        int newID = getFirstBMFGroupIDAvailable();
        if(newID != Constants.GROUP_ID_MAX_ID_AVAILABLE+1){
            BMFGroup newGroup = new BMFGroup(newID, name);
            BMFGroupVector.addElement(newGroup);
            updateGroupsJLists();

            print("GROUP " + newGroup.getName() + " CREATED WITH ID " + newGroup.getGroupID() + "!!!");
        }
        else print("TO MANY GROUPS ALREADY CREATED!!!");
    }

    private void removeGroup(BMFGroup group){
        for(int i=0; i<this.BMFGroupVector.size(); i++){
            if(BMFGroupVector.elementAt(i).equals(group)){
                
                Vector<BMFNode> nodes = (Vector<BMFNode>)BMFGroupVector.elementAt(i).getNodes().clone();
                if(nodes.size()>0){

                    Vector<MembershipPacket> membs = new Vector();

                    for(int j=0; j<nodes.size(); j++){
                        MembershipPacket mp = new MembershipPacket();

                        mp.setDestinationNode(nodes.elementAt(j).getNodeID());
                        mp.setMembershipType(Constants.MEMBERSHIP_TYPE_DELETE);
                        mp.setGroupID(group.getGroupID());

                        membs.addElement(mp);
                    }

                    //inizio update rimozione gruppo
                    storeTimestamp(System.currentTimeMillis(),0,"REMOVING GROUP",-1,-1,-1);
                    
                    new GroupUpdaterThread(group, membs, this).start();

//                    for(int j=0; j<nodes.size(); j++){
//                        nodes.elementAt(j).deleteGroup(group);
//                    }
                }

                BMFGroupVector.removeElementAt(i);
                break;
            }
        }
        print("GROUP " + group.getName() + " WITH ID " + group.getGroupID() + " DELETED!!!");
        updateGroupsJLists();
        
               
    }

//    private void resetDestinationFormula(){
//        destinationFormulaToShow="";
//        destinationFormulaToElaborate="";
//        this.destinationFormulaJTextArea.setText("");
//        updateDestinationFormulasInAllTabs();
//        waiting4GroupInDestinationFormula = true;
//    }

    private BMFNode getNodeByID(int id){
        for(int i=0;i<this.BMFNodeVector.size();i++){
            if(BMFNodeVector.elementAt(i).getNodeID() == id)
                return BMFNodeVector.elementAt(i);
        }
        return null;
    }

    public void updateNodeMemberships(boolean isDestinationNode, String dest,
                                                int membershipType, BMFGroup[] newGroups){

        Vector<BMFNode> destinationNodes = getNodesFromDestinationFormula( isDestinationNode,  dest);

        if(destinationNodes != null){
            for(int i=0; i<destinationNodes.size(); i++){

                if(membershipType == Constants.MEMBERSHIP_TYPE_RESET){
                    destinationNodes.elementAt(i).resetGroups();
                }
                else if(membershipType == Constants.MEMBERSHIP_TYPE_DELETE){
                    for(int j=0; j<newGroups.length; j++){
                        destinationNodes.elementAt(i).deleteGroup(newGroups[j]);
                    }
                }
                else if(membershipType == Constants.MEMBERSHIP_TYPE_UPDATE){
                    destinationNodes.elementAt(i).resetGroups();
                    for(int j=0; j<newGroups.length; j++){
                        destinationNodes.elementAt(i).addGroup(newGroups[j]);
                    }
                }
                else if(membershipType == Constants.MEMBERSHIP_TYPE_ADD){
                    for(int j=0; j<newGroups.length; j++){
                        destinationNodes.elementAt(i).addGroup(newGroups[j]);
                    }
                }

            }
        }
    }

    private Vector<BMFNode> getNodesFromDestinationFormula(boolean isDestinationNode, String dest){

        Vector<BMFNode> nodes = new Vector();

        try{
            if(isDestinationNode){
                if(Integer.parseInt(dest) == Constants.ADDRESSEE_BROADCAST){
                    nodes = (Vector<BMFNode>) this.BMFNodeVector.clone();
                }
                else{
                     BMFNode node = getNodeByID(Integer.parseInt(dest));
                     nodes.addElement(node);
                     return nodes;
                }
                
            }
            else{ // group/group composition destination
                Destination destination = new Destination();
                destination.setDestinationGroups(dest);
                int[] destGroupIDs = destination.getDestGroupIDs();
                int[] isNotGroup = destination.getIsNotGroup();
                boolean[] isNotGroupBool = new boolean[isNotGroup.length];
                int[] associativeRules = destination.getAssociativeRules();

                for(int i=0; i<isNotGroup.length;i++){
                    if(isNotGroup[i] == Constants.IS_NOT_FIELD_FALSE) isNotGroupBool[i] = false;
                    else isNotGroupBool[i] = true;
                }

                Vector<BMFGroup> destGroups = getGroupsByIDs(destGroupIDs);
                if(destGroups.size() != destGroupIDs.length) throw new Exception();




                for(int i=0; i<destGroups.size(); i++){
                    
                    Vector<BMFNode> nodes2 = (Vector<BMFNode>)this.BMFNodeVector.clone();
                    Vector<BMFNode> nodes3 = new Vector();

                    for(int j=0; j<nodes2.size(); j++){
                        boolean belongs = nodes2.elementAt(j).isBelongingToGroup(destGroups.elementAt(i));

                        if(((belongs && !isNotGroupBool[i]) || (!belongs && isNotGroupBool[i]))){
                            nodes3.addElement(nodes2.elementAt(j));
                        }
                    }

                    if(i>0){
                        if(associativeRules[i-1] == Constants.ASSOCIATIVE_RULE_AND)
                            nodes = groupsAND(nodes, nodes3);
                        if(associativeRules[i-1] == Constants.ASSOCIATIVE_RULE_OR)
                            nodes = groupsOR(nodes, nodes3);
                    }
                    else {
                        nodes = (Vector<BMFNode>)nodes3.clone();
                    }
                }

            }
        }catch(Exception e){
            print("WRONG DESTINATION FORMULA!!!");
            return null;
        }

        return nodes;
    }

    private Vector<BMFGroup> getGroupsByIDs(int[] destGroupIDs) {
        Vector<BMFGroup> returnVector = new Vector();
        for(int i=0; i<destGroupIDs.length; i++){
            for(int j=0; j<this.BMFGroupVector.size(); j++){
                if(BMFGroupVector.elementAt(j).getGroupID() == destGroupIDs[i]){
                    returnVector.addElement(BMFGroupVector.elementAt(j));
                    break;
                }
            }
        }
        return returnVector;
    }

    private Vector<BMFNode> groupsAND(Vector<BMFNode> nodes, Vector<BMFNode> nodes2) {

        Vector<BMFNode> returnVector = new Vector();

        for(int i=0; i<nodes.size(); i++){
            for(int j=0; j<nodes2.size(); j++){
                if(nodes.elementAt(i).equals(nodes2.elementAt(j))){
                    returnVector.addElement(nodes.elementAt(i));
                    break;
                }
            }
        }
        return returnVector;

    }

    private Vector<BMFNode> groupsOR(Vector<BMFNode> nodes, Vector<BMFNode> nodes2) {

        Vector<BMFNode> returnVector = (Vector<BMFNode>)nodes.clone();

        for(int i=0; i<nodes2.size(); i++){
            boolean found = false;

            for(int j=0; j<nodes.size(); j++){
                if(nodes.elementAt(j).equals(nodes2.elementAt(i))){
                    found = true;
                    break;
                }
            }
            if(!found) returnVector.addElement(nodes2.elementAt(i));
        }
        return returnVector;

    }

    private RequestPerComboBox[] getRequestsPerScheduleComboBoxFromBMFRequestVector() {
        RequestPerComboBox[] toReturn = new RequestPerComboBox[this.BMFRequestVector.size()+1];
        toReturn[0] = new RequestPerComboBox("NEW REQUEST", 0);

        for(int i=0; i<this.BMFRequestVector.size();i++){
            toReturn[i+1] = new RequestPerComboBox(
                                this.BMFRequestVector.elementAt(i).getName(),
                                this.BMFRequestVector.elementAt(i).getRequestID());
        }

        return toReturn;
    }

    private RequestPerComboBox[] getRequestsPerUNScheduleComboBoxFromBMFRequestVector() {
        
        Vector<BMFRequest> BMFRequestUNScheduleVector = new Vector();
        for(int i=0; i<this.BMFRequestVector.size();i++){
            if(BMFRequestVector.elementAt(i).isActive()) 
                BMFRequestUNScheduleVector.addElement(BMFRequestVector.elementAt(i));
        }
        
        RequestPerComboBox[] toReturn = new RequestPerComboBox[BMFRequestUNScheduleVector.size()];

        for(int i=0; i<BMFRequestUNScheduleVector.size();i++){
            toReturn[i] = new RequestPerComboBox(
                                BMFRequestUNScheduleVector.elementAt(i).getName(),
                                BMFRequestUNScheduleVector.elementAt(i).getRequestID());
        }

        return toReturn;
    }



    private BufferedImage getIcon(){
        try {
            
            return ImageIO.read(this.getClass().getResource("/bmf/images/logoico.gif"));

        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return null;
    }

    private void updateDestinationFormulasInAllTabs() {
        //destinationFormulaToShow;
        membershipDestinationJTextField.setText(destinationFormulaToShow);
        scheduleDestinationJTextField.setText(destinationFormulaToShow);
        unscheduleDestinationJTextField.setText(destinationFormulaToShow);
        resetDestinationJTextField.setText(destinationFormulaToShow);
    }

    private void updateFunctionDetailsTextWithSelectedFunction() {
        BMFRequest req = (BMFRequest)functionsJList.getSelectedValue();
        functionDetailsJTextArea.setText(req.getStringDetails());
        this.functionDetailsJTextArea.setCaretPosition(0);
    }

    @Override
    //OLD SIGNATURE public void requestExpired(BMFRequest req) {
    public void	requestExpired(IConfigurationPacket iConfiguration){
        
        functionDetailsJTextArea.setText("");
        this.updateScheduleRequestsAvailableJComboBox();
        this.updateUNScheduleRequestsAvailableJComboBox();
        updateRequestsJList();
        
    }


    private BMFRequest getBMFRequestByID(int requestID) {
        for(int i=0; i<this.BMFRequestVector.size();i++){
            if(BMFRequestVector.elementAt(i).getRequestID() == requestID)
                return BMFRequestVector.elementAt(i);
        }
        return null;
    }



    private void loadDestinationDialog() {
        DestinationDialog dialog = new DestinationDialog(new javax.swing.JFrame(), true);
        dialog.setDadAndPopulateFields(this);
        dialog.setVisible(true);
    }



    void destinationChanged(String destinationFormulaToShow, String destinationFormulaToElaborate,
                        boolean destinationFormulaNode, boolean waiting4GroupInDestinationFormula) {

        this.destinationFormulaToShow = destinationFormulaToShow;
        this.destinationFormulaToElaborate = destinationFormulaToElaborate;
        this.isDestinationFormulaNode = destinationFormulaNode;
        this.waiting4GroupInDestinationFormula = waiting4GroupInDestinationFormula;
        updateDestinationFormulasInAllTabs();
    }





    class RequestPerComboBox{
        String name;
        int requestID;

        RequestPerComboBox(String s, int id){
            name = s;
            requestID = id;
        }

        public String getName(){
            return name;
        }
        public int getRequestID(){
            return requestID;
        }

        @Override
        public String toString(){
            return name;
        }
    }

}
